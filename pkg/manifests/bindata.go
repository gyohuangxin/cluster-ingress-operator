// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/router/cluster-role-binding.yaml (329B)
// assets/router/cluster-role.yaml (788B)
// assets/router/deployment.yaml (1.76kB)
// assets/router/metrics/cluster-role-binding.yaml (285B)
// assets/router/metrics/cluster-role.yaml (259B)
// assets/router/metrics/role-binding.yaml (297B)
// assets/router/metrics/role.yaml (291B)
// assets/router/namespace.yaml (332B)
// assets/router/service-account.yaml (213B)
// assets/router/service-cloud.yaml (631B)
// assets/router/service-internal.yaml (429B)
// manifests/00-cluster-role.yaml (2.305kB)
// manifests/00-custom-resource-definition-internal.yaml (4.452kB)
// manifests/00-custom-resource-definition.yaml (31.526kB)
// manifests/00-ingress-credentials-request.yaml (1.464kB)
// manifests/00-namespace.yaml (126B)
// manifests/01-cluster-role-binding.yaml (369B)
// manifests/01-role-binding.yaml (367B)
// manifests/01-role.yaml (477B)
// manifests/01-service-account.yaml (196B)
// manifests/02-deployment.yaml (1.527kB)
// manifests/03-cluster-operator.yaml (357B)
// manifests/image-references (313B)

package manifests

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsRouterClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x31\x4e\xc4\x40\x0c\x45\xfb\x39\x85\x25\xea\x0c\xa2\x43\xd3\x01\x37\x58\x24\x7a\xef\xc4\xbb\x31\x49\xec\xc8\xf6\xa4\xe0\xf4\x28\x4a\x44\xc3\x4a\x29\x2d\xf9\xbf\xff\xfe\x13\xbc\xb3\xf4\x0e\x31\x10\x98\xb6\x20\x03\xd3\x89\x20\x14\x38\x1c\x3e\xc9\x56\xae\x04\x6f\xb5\x6a\x93\xc8\x69\x64\xe9\x0b\x7c\x4c\xcd\x83\xec\xa2\x13\x6d\x71\x96\x7b\xc2\x85\xbf\xc8\x9c\x55\x0a\xd8\x15\x6b\xc6\x16\x83\x1a\xff\x60\xb0\x4a\x1e\x5f\x3d\xb3\x3e\xaf\x2f\x69\xa6\xc0\x1e\x03\x4b\x02\x10\x9c\xa9\x80\x2e\x24\x3e\xf0\x2d\x3a\x96\xbb\x91\x7b\xb7\x9b\x24\x6f\xd7\x6f\xaa\xe1\x25\x75\xb0\x17\x1f\x3e\x87\xce\x1f\xe1\xf8\xdf\x4f\x5f\xb0\x3e\xa2\xa6\x6d\xd8\x85\x6e\x5b\xf1\xbf\x19\xe7\x32\x27\xf0\xdf\x00\x00\x00\xff\xff\x83\x13\xa9\xa6\x49\x01\x00\x00")

func assetsRouterClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterClusterRoleBindingYaml,
		"assets/router/cluster-role-binding.yaml",
	)
}

func assetsRouterClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsRouterClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/cluster-role-binding.yaml", size: 329, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x12, 0x9a, 0xeb, 0xd3, 0x79, 0x1a, 0xa6, 0x75, 0xb5, 0xda, 0x10, 0x70, 0xf9, 0x80, 0xd1, 0x51, 0x55, 0x98, 0x4d, 0x11, 0x98, 0x79, 0x5c, 0x46, 0x99, 0xa3, 0x39, 0x68, 0xe9, 0xa2, 0x72, 0x56}}
	return a, nil
}

var _assetsRouterClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x31\x6f\xe3\x30\x0c\x85\x77\xfd\x0a\x22\x37\xdb\xc1\x6d\x07\xaf\x37\xdc\x76\x43\x51\x74\xa7\x65\xa6\x66\xed\x88\x02\x49\x39\x6d\x7f\x7d\x61\x3b\x29\x82\x24\x45\x9b\xcd\xcf\x22\xbf\x47\x3e\xe9\x17\xfc\x1d\x8b\x39\x29\x58\x94\x4c\x1d\xa8\x8c\x04\x3b\x51\x50\x29\x4e\x6a\x35\x3c\xf6\x6c\x60\xbd\x94\xb1\x83\x96\x00\x0d\x94\xcc\x95\xa3\xf3\xb4\xc8\x2c\x66\xdc\x8e\x54\x87\x81\x53\xd7\x9c\x88\x0f\x32\x52\xc0\xcc\x4f\xa4\xc6\x92\x1a\xd0\x16\x63\x8d\xc5\x7b\x51\x7e\x47\x67\x49\xf5\xf0\xc7\x6a\x96\xed\xf4\x3b\xec\xc9\xb1\x43\xc7\x26\x00\x24\xdc\x53\x03\x92\x29\x59\xcf\x3b\xaf\x38\x3d\x2b\x99\x55\xeb\x48\x41\xcb\x48\xd6\x84\x0a\x30\xf3\x3f\x95\x92\x6d\x6e\xaa\x60\xb3\x09\x30\xcf\x26\x45\x23\x1d\xff\x51\xea\xb2\x70\x72\x5b\xd4\x0c\xb6\x8c\x91\x56\x69\xa4\x13\xaf\x62\x22\x6d\x8f\x2d\x23\x9b\x2f\x1f\x07\xf4\xd8\x87\x6b\x9f\x79\x05\x4a\xce\xf1\x7c\x87\x6b\x6b\x97\x81\x92\xd2\xc4\x74\xb8\x70\x88\x4a\xe8\xf4\x05\xf9\x32\x9c\x6b\xb0\x95\xf6\x85\xa2\x63\x8c\x64\x76\x9f\xc1\x92\x60\xfd\x99\xec\x4d\xfc\x52\x73\x6f\x26\x3f\x07\x6f\xcd\xd1\xcb\x05\xbf\xe4\xee\xf6\xc0\x46\xb1\x28\xfb\xdb\x37\xe8\x53\x59\x94\xe4\xf4\xea\x51\x92\xb9\xe2\xf1\xde\xcf\x7d\x8c\xce\x9a\xff\xcf\xcf\x61\x3d\xe8\xc5\x3c\x91\x1f\x44\x87\xf0\x11\x00\x00\xff\xff\xad\x45\xb2\xc3\x14\x03\x00\x00")

func assetsRouterClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterClusterRoleYaml,
		"assets/router/cluster-role.yaml",
	)
}

func assetsRouterClusterRoleYaml() (*asset, error) {
	bytes, err := assetsRouterClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/cluster-role.yaml", size: 788, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa, 0xc4, 0x4e, 0xa2, 0x9d, 0x1b, 0xd7, 0x35, 0xbf, 0x95, 0x95, 0xb4, 0x17, 0x87, 0x56, 0xb, 0x12, 0xf, 0xb6, 0x3e, 0x51, 0xe5, 0x5a, 0xd0, 0x66, 0x3a, 0x4d, 0x36, 0xc9, 0x93, 0x90, 0xb2}}
	return a, nil
}

var _assetsRouterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\x41\x6f\xea\x48\x0c\xc7\xef\x7c\x0a\xeb\x71\x66\xa1\xaf\xdd\x6a\x37\x37\x04\xe9\x0a\xa9\x94\x08\xd2\x5e\xd1\x74\x62\xc0\xea\x64\x66\xd6\x76\xa8\xb2\x9f\x7e\x95\x40\x5b\xc2\xd2\xaa\x7b\x78\x9c\xa2\xf1\xdf\x7f\xff\x9c\xd8\x43\x1f\xa6\x18\x5d\xa8\x4b\xf4\x0a\xaf\xa4\x3b\x28\x70\x63\x2a\xa7\xb0\x37\xae\x42\xe9\xf5\x61\xe6\xb7\x8c\x22\x30\x09\x5e\x39\x38\x87\x0c\x12\xd1\xd2\x86\xec\x51\x04\x86\x11\x4c\x8c\x8e\xb0\x00\xa3\xc0\x95\x57\x2a\xf1\xb7\xde\x0b\xf9\x22\x39\xa9\xd0\x33\x91\x9e\x90\x85\x82\x4f\x9a\x04\x19\xee\xaf\x7a\x7d\xf0\xa6\x44\x30\xbe\x68\x1f\x24\x1a\x8b\xad\xa3\xa0\x76\xdc\x9a\xaa\x49\x0f\x20\x72\x68\x89\xa6\x68\x0a\x47\x1e\x57\x68\x83\x2f\x24\x81\xdb\xd1\xa8\x07\xa0\x58\x46\x67\x14\x1b\x29\xc0\x5b\x52\xfb\x8c\xbc\x27\x8b\x63\x6b\x43\xe5\xf5\xc1\x94\x98\x00\x87\x4a\x91\x8f\x82\x3e\xf8\x50\xe0\x0a\x1d\x5a\x0d\x0c\x24\xff\x61\x38\xe8\x22\x53\x60\xd2\x7a\xe2\x8c\xc8\xc1\x47\x6a\x51\x2c\x07\xd6\x55\xa2\xc8\x03\xcb\xa4\x64\x8d\x3b\x26\xd8\xe0\xd5\x90\x47\x96\x37\x16\x80\x41\xdb\xee\x19\xc1\x81\x82\x4a\xb3\xc5\xcf\xcb\x37\xbf\x56\x92\x55\xce\x65\xc1\x91\xad\x13\x98\x6d\x1e\x82\x66\x8c\xd2\xbc\xe7\x0f\x9d\x22\x97\xe4\x8d\x52\xf0\x73\x14\x69\x92\x8e\x09\x77\xc6\xb9\x67\x63\x5f\xf2\x70\x1f\xb6\xb2\xf0\x29\x73\x38\xc5\x88\x81\xf5\x04\xf7\x03\x78\xa7\x1a\x4f\x8e\x4f\xba\xcb\x02\x6b\x02\x7f\x8c\x3a\xd1\xc8\x41\x83\x0d\x2e\x81\x7c\x92\x7d\x62\x27\x5f\xf9\xdd\xdc\x5c\xff\x2f\xc3\x12\x95\xc9\x7e\x69\x79\xf5\xe7\xf5\xed\xb7\x3c\xfb\x30\x47\xde\x9e\x8d\xf5\x47\x18\xfd\x3e\xe9\xa8\x45\x8d\x0a\x54\x82\xfc\x3e\xd4\xd1\x88\xbc\x06\x2e\xda\x99\xde\xa2\x47\x36\xda\x31\xbc\xd0\xc2\x2a\x1f\xe7\xab\x75\xb6\x58\xe6\x1d\xca\x76\xdd\x12\xf8\xd1\xe0\xff\xb8\x90\xb6\x5c\x3c\xe6\xe9\x72\xbd\x4a\x97\x4f\xb3\x49\xba\x7e\x18\xcf\xd3\x55\x36\x9e\xa4\x97\x4c\x42\x44\x2f\x3b\xda\xe8\x80\x0e\x0b\x7e\xc1\x6f\x9a\xde\x8d\x1f\xef\xf3\xf5\x24\x5d\xe6\xb3\xbb\xd9\x64\x9c\xa7\xeb\xe9\x6c\x79\xc9\x6e\x88\x6a\x87\xf1\x85\x86\xea\x64\x18\x99\xf6\x46\x4f\x1b\x73\xb4\x47\x8f\x22\x19\x87\x67\x4c\x3a\x06\xe4\x49\xc9\xb8\x29\x3a\x53\xbf\xaf\xf2\x55\x77\x86\x9a\x19\xf9\x0b\xb5\x9b\x08\x10\x8d\xee\x12\x18\xee\xd0\x38\xdd\xfd\x73\x1e\xbc\xf4\xa5\x19\x4d\x41\xbf\x1a\x64\xd8\x54\xa9\xbf\x87\x23\xa1\x62\x8b\xd2\x35\x64\xfc\xbb\x42\x51\x39\x2f\x63\x63\xd5\x10\x8d\xca\xb3\xf3\x12\xcb\xc0\x75\x02\x3f\x7f\xbf\x9d\xd3\x49\x6c\x1f\x5c\x55\xe2\xbc\xb9\xed\xce\x36\xb9\x6c\xce\xb2\x03\xf5\xd7\x5f\x0e\x8e\xb3\x70\xfc\x5f\x18\x58\x64\x6d\xee\xfe\x73\x55\xd3\xf3\xc2\xbb\x3a\x01\xe5\xea\x2d\x74\x00\x78\xaf\x3d\xf8\x86\x97\xa0\xe5\xee\x0b\x3e\xaa\xe7\xa1\xc0\x04\x6e\x7e\x8e\x3a\x0b\xb7\x6a\xe5\xcd\x1d\xdc\xbd\x2f\x07\x87\x55\xfd\x37\x00\x00\xff\xff\xc6\x3b\xf5\x23\xe0\x06\x00\x00")

func assetsRouterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterDeploymentYaml,
		"assets/router/deployment.yaml",
	)
}

func assetsRouterDeploymentYaml() (*asset, error) {
	bytes, err := assetsRouterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/deployment.yaml", size: 1760, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x95, 0xae, 0xdd, 0xfc, 0xcf, 0xfb, 0x9e, 0x6a, 0x40, 0x54, 0xc3, 0x32, 0x6a, 0x41, 0xf4, 0xdf, 0xec, 0xfc, 0x28, 0xfd, 0x94, 0xab, 0xf5, 0x8c, 0xb4, 0x26, 0xb, 0x57, 0x70, 0x30, 0xba, 0x1c}}
	return a, nil
}

var _assetsRouterMetricsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xc1\x4a\xc4\x40\x0c\x86\xef\xf3\x14\x79\x81\x56\xbc\x2d\x73\x53\x0f\xde\x57\xf0\x9e\x9d\xa6\x36\xb6\x93\x0c\x49\xa6\x07\x9f\x5e\x8a\x22\xc2\x42\xaf\x81\x7c\xdf\xff\xad\x2c\x53\x86\x97\xad\x7b\x90\x5d\x75\xa3\x67\x96\x89\xe5\x23\x61\xe3\x77\x32\x67\x95\x0c\x76\xc3\x32\x62\x8f\x45\x8d\xbf\x30\x58\x65\x5c\x2f\x3e\xb2\x3e\xec\x8f\xa9\x52\xe0\x84\x81\x39\x01\x08\x56\xca\x60\xda\x83\x6c\xa8\x2a\x1c\x6a\x07\xcc\xfb\xed\x93\x4a\x78\x4e\x03\xfc\x18\xdf\xc8\x76\x2e\xf4\x54\x8a\x76\x89\xbf\xd7\x66\x5a\x29\x16\xea\x3e\xac\x17\xff\x3d\x7b\xc3\x42\x19\xb4\x91\xf8\xc2\x73\xfc\x27\x9b\x6e\x74\xa5\xf9\x90\xdf\xa5\x9c\x0c\x02\xc0\xc6\xaf\xa6\xbd\x9d\xd4\xa5\xef\x00\x00\x00\xff\xff\x7f\xc0\x4a\x40\x1d\x01\x00\x00")

func assetsRouterMetricsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterMetricsClusterRoleBindingYaml,
		"assets/router/metrics/cluster-role-binding.yaml",
	)
}

func assetsRouterMetricsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsRouterMetricsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/metrics/cluster-role-binding.yaml", size: 285, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0xce, 0x4e, 0xd1, 0x37, 0xde, 0x79, 0x91, 0x5c, 0x71, 0xd1, 0x88, 0x1b, 0xdb, 0xaf, 0x1, 0xe5, 0x8c, 0x81, 0xb3, 0xfd, 0x30, 0xe3, 0x5d, 0xb0, 0x59, 0x8b, 0x2a, 0x47, 0xf9, 0xa0, 0xdf}}
	return a, nil
}

var _assetsRouterMetricsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xce\xb1\x4e\xc4\x40\x0c\x84\xe1\x7e\x9f\xc2\x12\x75\x72\xa2\x43\x69\x29\xe8\x29\xe8\x9d\xec\x70\xb1\x2e\x6b\xaf\x6c\xef\x49\xf0\xf4\xe8\x44\x90\xa8\xe7\x93\xfe\x79\xa2\xd7\x63\x44\xc2\xc9\xed\x40\x90\x02\x15\x95\xd6\x2f\xea\x6e\x0d\xb9\x63\x04\xa5\x51\x6c\xce\x1d\xe4\x36\x1e\xb6\x21\x5d\xb6\x20\x68\xed\x26\x9a\x85\xbb\x7c\xc0\x43\x4c\x17\xf2\x95\xb7\x99\x47\xee\xe6\xf2\xcd\x29\xa6\xf3\xed\x25\x66\xb1\xcb\xfd\xb9\xdc\x44\xeb\xf2\xd7\x7c\xb7\x03\xa5\x21\xb9\x72\xf2\x52\x88\x94\x1b\x96\x33\x32\x35\x53\x49\x73\xd1\x6b\xf1\x71\x20\x96\x32\x11\x77\x79\x73\x1b\x3d\x1e\x7a\xfa\x95\xb3\x75\x68\xec\xf2\x99\xb3\x58\x21\x72\x84\x0d\xdf\xf0\xdf\x78\x5c\xce\xcf\x85\xe8\x0e\x5f\xcf\xf1\x8a\x2c\x3f\x01\x00\x00\xff\xff\x4f\xd5\xdf\xe0\x03\x01\x00\x00")

func assetsRouterMetricsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterMetricsClusterRoleYaml,
		"assets/router/metrics/cluster-role.yaml",
	)
}

func assetsRouterMetricsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsRouterMetricsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/metrics/cluster-role.yaml", size: 259, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x98, 0x77, 0x73, 0x9c, 0x6, 0x33, 0xf2, 0x91, 0x6f, 0x3b, 0x35, 0x49, 0xf3, 0xa5, 0xfc, 0x1d, 0x2e, 0x2e, 0xa6, 0x5b, 0x95, 0xa6, 0x7e, 0x8d, 0xfe, 0x7e, 0xf4, 0x62, 0x30, 0xa5, 0x37, 0x61}}
	return a, nil
}

var _assetsRouterMetricsRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xce\x31\x4e\xc5\x40\x0c\x04\xd0\x7e\x4f\xe1\x0b\x24\x88\xee\x6b\x3b\x68\xe8\x3f\x12\xbd\xb3\x71\x12\x93\xac\xbd\xb2\xbd\x29\x38\x3d\x42\x8a\x44\x05\xd2\x6f\x47\x33\x9a\x87\x8d\x3f\xc8\x9c\x55\x32\xd8\x84\x65\xc4\x1e\x9b\x1a\x7f\x61\xb0\xca\xb8\xdf\x7c\x64\x7d\x3a\x9f\xd3\xce\x32\x67\xb8\xeb\x41\xaf\x2c\x33\xcb\x9a\x2a\x05\xce\x18\x98\x13\x80\x60\xa5\x0c\xcd\xb4\x52\x6c\xd4\x7d\xd8\x6f\x7e\xc5\xde\xb0\x50\x06\x6d\x24\xbe\xf1\x12\x03\xcb\x6a\xe4\x9e\x4c\x0f\xba\xd3\xf2\x33\xc7\xc6\x6f\xa6\xbd\xfd\x63\x48\x00\xbf\x84\xbf\x1e\xbd\x4f\x9f\x54\xc2\x73\x1a\xae\xf6\x3b\xd9\xc9\x85\x5e\x4a\xd1\x2e\xf1\xa0\xb4\xaa\x70\xa8\xb1\xac\x90\xbe\x03\x00\x00\xff\xff\x15\x9f\x30\x56\x29\x01\x00\x00")

func assetsRouterMetricsRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterMetricsRoleBindingYaml,
		"assets/router/metrics/role-binding.yaml",
	)
}

func assetsRouterMetricsRoleBindingYaml() (*asset, error) {
	bytes, err := assetsRouterMetricsRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/metrics/role-binding.yaml", size: 297, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0xef, 0x8, 0xfb, 0x1f, 0xa3, 0xc7, 0xfb, 0xbc, 0x6, 0x78, 0xad, 0x0, 0x28, 0x90, 0xc8, 0xe8, 0xf5, 0x7d, 0xf8, 0xd0, 0xeb, 0x52, 0xf, 0xd4, 0x81, 0xce, 0x69, 0xb8, 0x8c, 0x26, 0x8c}}
	return a, nil
}

var _assetsRouterMetricsRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\x05\x91\x37\x3b\x0f\xdd\x02\xfd\x40\xf7\x0e\xdd\x19\xe9\x36\x26\x62\x8b\x02\x49\xb9\x68\xbf\xbe\x88\xe3\x02\x9d\x78\xef\x01\xc1\xc3\x7f\xf4\xa6\x0b\x9c\x1a\x50\x51\xe9\xfa\x45\xdd\x74\x45\xcc\x18\x4e\xa1\xe4\xc5\xb8\x83\x4c\x47\xc0\x68\x45\x98\x14\x27\xb4\xda\x55\x5a\x24\xee\xf2\x0e\x73\xd1\x96\xc9\xae\x5c\xce\x3c\x62\x56\x93\x6f\x0e\xd1\x76\xbe\x5f\xfc\x2c\xfa\x7f\x7b\x49\x77\x69\x35\xef\xae\xb4\x22\xb8\x72\x70\x4e\x44\x8d\x57\xe4\x3f\xca\xe9\x7e\xf1\x03\x7b\xe7\x82\x4c\xda\xd1\x7c\x96\x8f\x98\xa4\xdd\x0c\xee\xc9\xc6\x02\xcf\x69\x22\xee\xf2\x6a\x3a\xba\x3f\x2e\x4d\x74\x3a\x25\x22\x83\xeb\xb0\x82\x83\x39\x6c\x93\x02\xdf\xcb\xef\xd7\xcf\xd6\xb5\x3e\xc2\x06\xbb\x1e\xcb\x37\xc4\x3e\x17\xf1\x67\xf8\xe4\x28\x73\xfa\x09\x00\x00\xff\xff\x67\x78\x6f\x08\x23\x01\x00\x00")

func assetsRouterMetricsRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterMetricsRoleYaml,
		"assets/router/metrics/role.yaml",
	)
}

func assetsRouterMetricsRoleYaml() (*asset, error) {
	bytes, err := assetsRouterMetricsRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/metrics/role.yaml", size: 291, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0xe3, 0x68, 0x2c, 0xfd, 0xf1, 0x27, 0x9d, 0xa0, 0x3b, 0x10, 0x3e, 0xca, 0x3b, 0x76, 0x39, 0xf4, 0xb1, 0x37, 0x7b, 0xa3, 0xa7, 0x11, 0xc0, 0x6, 0x4b, 0x47, 0xbb, 0x93, 0x4b, 0xb7, 0xc2}}
	return a, nil
}

var _assetsRouterNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcf\xb1\x4e\xc3\x50\x0c\x85\xe1\x3d\x4f\x71\x14\xe6\x14\xb1\xde\x77\x80\x05\x89\xdd\xbd\x71\x53\x93\x1b\x3b\xb2\x9d\x56\xbc\x3d\xa2\x05\x51\x84\x3a\xfb\xd3\x2f\x9f\x59\x74\x2c\x78\xa1\x85\x63\xa5\xca\x1d\xad\xf2\xc6\x1e\x62\x5a\x70\x7a\xea\x16\x4e\x1a\x29\xa9\x74\x80\xd2\xc2\x05\xb6\xb2\xc6\x51\x0e\x39\x88\x4e\xce\x11\x1d\x40\xaa\x96\x94\x62\x1a\x5f\x10\xbf\x68\x27\xf6\xa8\x36\xf2\x10\xdc\xb8\xa6\x79\x41\xdf\x77\x40\xa3\x3d\xb7\x6f\xfc\x00\x6a\xcd\xce\x37\xe5\xc5\x54\xd2\x5c\x74\x42\x1a\x9a\xd9\x8c\x83\x39\x5e\xd9\x4f\x52\xf9\xf9\x7a\x85\xed\xdf\xb9\x66\x40\x14\x79\x94\xb8\xfc\x77\x1d\xf1\xef\x85\xda\xb6\x48\xf6\x9b\x70\x41\x9f\xbe\x71\x7f\xb1\xf7\x97\x01\xca\x79\x36\x9f\x77\x7f\x7a\xab\x35\xa9\x1f\xc3\xe4\xb6\xad\x05\x3f\xfc\x33\x00\x00\xff\xff\xfc\x31\x60\x23\x4c\x01\x00\x00")

func assetsRouterNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterNamespaceYaml,
		"assets/router/namespace.yaml",
	)
}

func assetsRouterNamespaceYaml() (*asset, error) {
	bytes, err := assetsRouterNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/namespace.yaml", size: 332, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x83, 0xe3, 0x8d, 0x5c, 0x13, 0x8b, 0x1, 0x55, 0x92, 0x5, 0xf, 0xe, 0x67, 0x18, 0xd5, 0xb5, 0xcd, 0x7f, 0x3c, 0x8, 0x6d, 0x82, 0x43, 0xd5, 0x94, 0x6a, 0x16, 0x59, 0x51, 0x20, 0xc9, 0x5f}}
	return a, nil
}

var _assetsRouterServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xce\xb1\x4e\xc4\x30\x10\x84\xe1\xde\x4f\x31\xd2\xd5\x9c\x44\xeb\x8e\x92\x16\x24\x7a\xb3\x99\xbb\x5b\x91\x78\xcd\xee\x3a\x88\xb7\x47\x41\x29\xa7\x98\x5f\xdf\x05\x2f\x22\x36\x7b\xe2\x66\x0e\xb7\x99\xf4\x80\x38\x5b\x72\xc1\xe7\x2f\xf2\x41\xd8\xa0\xb7\x34\xbf\xe2\x35\xf1\xa3\xeb\x0a\xe7\xf7\x54\x27\x64\x9d\x91\x74\x84\xd8\xe0\x52\x2e\x18\xf4\x4d\x23\xd4\x7a\xc0\xb9\xfe\x57\xd2\xf0\x76\x84\x31\xdc\x84\x11\xda\xef\xd7\xf2\xa5\x7d\xa9\x78\xa7\xef\x2a\x3c\x0d\xa5\x0d\xfd\xa0\x1f\xef\x8a\xfd\xb9\x6c\xcc\xb6\xb4\x6c\xb5\x00\xbd\x6d\xac\x27\xf0\x9c\x31\x9a\xb0\x1e\xba\x1e\x0f\xbd\xe5\x93\xf6\xbb\x33\xa2\xfc\x05\x00\x00\xff\xff\x33\xdc\xda\x8c\xd5\x00\x00\x00")

func assetsRouterServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterServiceAccountYaml,
		"assets/router/service-account.yaml",
	)
}

func assetsRouterServiceAccountYaml() (*asset, error) {
	bytes, err := assetsRouterServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/service-account.yaml", size: 213, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd0, 0xe3, 0x6, 0x3a, 0x88, 0x2e, 0x33, 0xe3, 0x24, 0xf0, 0xf0, 0xe9, 0x43, 0xc8, 0x46, 0x6c, 0x60, 0x9, 0x69, 0x84, 0x3, 0xd8, 0xc3, 0x80, 0xb, 0xab, 0x37, 0x13, 0xce, 0xf2, 0xeb, 0x60}}
	return a, nil
}

var _assetsRouterServiceCloudYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x41\x6b\x14\x41\x10\x85\xef\xfd\x2b\x1e\xec\x39\x41\x31\x07\x99\x63\x72\x12\x82\x2c\xb8\x78\xaf\xf4\xd4\xec\x34\xe9\xa9\x6a\xaa\x6a\x56\xf7\xdf\xcb\xf4\xec\x82\xa2\x78\xec\x07\xf5\xfa\x7b\xdf\x01\xaf\x4a\x23\x9e\xa9\x92\x64\x36\x7c\x63\xbb\x94\xcc\x08\x45\xab\x94\x19\x45\x30\x99\x4a\x40\x27\xc4\xcc\x30\x5d\x83\x6d\x8b\x73\xd5\x75\x04\xcb\xa5\x98\xca\xc2\x12\xfe\x98\x0e\xf8\x22\x67\x63\x77\xbc\xa8\x84\x69\xad\x6c\xf0\xc6\xb9\x4c\x25\xe3\x42\x75\x65\x07\x19\x83\x5a\xab\x85\x47\x50\xc0\x56\x89\xb2\xf0\x63\x7a\x2f\x32\x0e\x77\x82\x44\xad\x7c\x67\xf3\xa2\x32\xe0\xf2\x31\x2d\x1c\x34\x52\xd0\x90\x80\x03\xbe\xd2\xc2\x28\x0e\xe7\xf8\xa3\x02\x10\x5a\xd8\x1b\x65\x1e\xa0\x8d\xc5\xe7\x32\xc5\x43\xd9\xa1\x12\x50\xe9\x8d\xab\x6f\x25\xd8\x18\x86\xdb\x9e\xb4\x31\x6e\x69\x5c\x1b\x0f\xdd\xc9\x5d\x49\x02\x9c\x2b\xe7\x50\xfb\xfb\x6c\x63\x39\xcd\xc5\x41\xd5\x15\x33\x79\x77\xc4\xd3\xc4\xb9\x1b\x5b\xc8\xde\x8b\x9c\xf1\xfa\x8c\xa6\x5a\x11\x64\x67\x0e\x07\x39\x56\x99\x99\x6a\xcc\x57\xfc\x98\x59\x20\xda\xcb\x6e\x7a\x9b\x8e\xbb\xa7\x66\xec\xbc\xd9\x17\x10\x44\x47\xc6\x1b\xcf\x45\xc6\xfe\x8f\xef\xaa\xb6\xd9\xfc\x33\xd8\x84\xea\xc9\x68\x9a\x4a\x3e\x6a\x2d\xf9\xba\x0d\xc9\x54\x13\xd0\xd4\xa2\xaf\x7e\xe8\x82\x06\xcc\x11\xad\xaf\x69\xa6\xa1\x59\xeb\x80\xd3\xcb\x71\x4f\xd4\x62\xc0\xe7\x0f\xfd\xb1\x03\x1f\x7b\x74\xbb\xf9\xbd\xc2\xff\xdb\xf1\xf4\xf4\xe9\x9f\x25\x9e\x7e\x05\x00\x00\xff\xff\x56\xdc\x0d\xe9\x77\x02\x00\x00")

func assetsRouterServiceCloudYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterServiceCloudYaml,
		"assets/router/service-cloud.yaml",
	)
}

func assetsRouterServiceCloudYaml() (*asset, error) {
	bytes, err := assetsRouterServiceCloudYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/service-cloud.yaml", size: 631, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0x97, 0xc4, 0xab, 0x8b, 0xa9, 0xa1, 0x47, 0xf7, 0xf, 0xeb, 0x38, 0x1b, 0xc2, 0xf7, 0x8c, 0xd9, 0xba, 0x35, 0x9b, 0x1, 0x67, 0x26, 0xd7, 0x3f, 0x6d, 0xa5, 0x5f, 0xf0, 0x92, 0x84, 0x8f}}
	return a, nil
}

var _assetsRouterServiceInternalYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcf\x31\x6b\xfb\x30\x10\x05\xf0\x5d\x9f\xe2\x41\xd6\xff\xbf\x34\x24\x94\x56\xab\xa7\x6c\x86\x96\xee\x87\x7c\x49\x8e\xca\x92\xb8\x3b\xbb\xf4\xdb\x97\x38\x0d\xb8\x74\xc9\x22\x90\xee\xe9\xf7\xb8\x0d\xba\x3c\x99\xb3\xe2\x95\x75\x96\xc4\xf8\x14\x3f\x63\xe0\x23\x4d\xd9\x31\x53\x9e\xd8\xc2\x06\x87\x72\x52\x36\x43\x57\x8b\x6b\xcd\x99\x15\xd6\x38\xc9\x51\x12\xa8\x94\xea\xe4\x52\x8b\x81\x94\x41\xad\x65\xe1\x01\xe4\xd0\xa9\xb8\x8c\xfc\x10\x3e\xa4\x0c\xf1\xd6\x11\xa8\xc9\x3b\xab\x49\x2d\x11\xf3\x36\x6c\x50\x68\xe4\x7f\xcb\x69\x8d\x12\x83\xca\xf0\x87\x35\xf6\x5f\xe4\xa5\x3f\x06\xc0\xbf\x1a\xc7\xdb\x1a\x87\x3e\x00\xad\xaa\xdb\x65\xf4\x7f\x21\x23\xce\xee\x2d\x00\xd7\x49\xc4\xf3\xe3\xf5\xa2\xd5\x6b\xaa\x39\xe2\xad\xeb\x97\x17\x27\x3d\xb1\xf7\x4b\xe8\xe7\xcf\x9a\xb0\x95\xb1\xdf\xef\xee\x44\x6c\xa5\x8c\xec\x2a\x69\xed\x6c\x5f\x76\x4f\x77\x40\x4b\xec\x3b\x00\x00\xff\xff\x90\x5e\x33\xca\xad\x01\x00\x00")

func assetsRouterServiceInternalYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterServiceInternalYaml,
		"assets/router/service-internal.yaml",
	)
}

func assetsRouterServiceInternalYaml() (*asset, error) {
	bytes, err := assetsRouterServiceInternalYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/service-internal.yaml", size: 429, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb8, 0x63, 0x52, 0x85, 0x8b, 0x99, 0xe6, 0xc7, 0xcb, 0x34, 0x3d, 0x8d, 0x43, 0x65, 0x10, 0x63, 0x51, 0x80, 0xc1, 0x29, 0x17, 0xb6, 0x8f, 0x84, 0xdc, 0xf8, 0x33, 0xa1, 0x21, 0xc2, 0x5a, 0x4f}}
	return a, nil
}

var _manifests00ClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x4d\x8f\x13\x31\x0c\xbd\xcf\xaf\x88\xb6\x37\xa4\x4e\xc5\x0d\xf5\x86\x40\xe2\x04\x2b\x21\xc4\x3d\x4d\x3c\x1d\xd3\x4c\x1c\xd9\x4e\x4b\xf9\xf5\x68\xbe\x76\xd9\xe9\x6c\x3b\xc0\xc2\x69\xc6\x8e\xf3\xfc\x62\x3f\x27\x2b\xf3\x2e\x64\x51\x60\xc3\x14\xc0\x54\xc4\x46\x6b\x30\x94\x80\xad\x12\x1b\x54\x81\x50\x95\xc5\xca\x7c\xb9\x7f\x7f\xbf\x35\x6f\x4d\x20\x35\x54\xb5\x51\x02\x46\x6a\xca\xc1\x9b\x1d\x18\x86\x14\xac\x03\x6f\x76\xe7\x0e\x4a\x0c\xc6\x0e\x2a\xda\x06\x24\x59\x07\xd2\xa1\x9f\x6a\x74\x75\xb1\x7a\x9a\xc5\x3a\xcd\x36\x84\xb3\x89\x00\x5e\x8c\x75\x0e\x44\xca\xe2\x80\xd1\x6f\x47\x82\x9f\x29\x40\x61\x13\x7e\x05\x16\xa4\xb8\x35\xbc\xb3\xae\xb4\x59\x6b\x62\xfc\x61\x15\x29\x96\x87\x37\x52\x22\x6d\x8e\xaf\x8b\x06\xd4\x7a\xab\x76\x5b\x98\x8e\xc1\xb6\x4d\x16\xa5\xc6\x4a\xd7\x18\xf7\x0c\x22\xeb\x31\x7d\xc1\x39\x80\x6c\x8b\xb5\xb1\x09\x3f\x30\xe5\x24\xed\xb6\xb5\xb9\xbb\x2b\x8c\x61\x10\xca\xec\x60\xf0\x39\x8a\x15\xee\x1b\x9b\xa4\x33\x1f\x4f\xd7\x99\x02\x7c\x44\x07\xd6\x39\xca\x51\x7b\x1f\x44\x9f\x08\x47\x6b\x88\x18\x0d\xc7\x30\x2c\x24\xf2\x43\xfc\x11\xfa\xe0\x23\xf0\x6e\x64\xf2\xea\xae\xb8\xe4\x67\x53\xc7\x62\xc2\xd0\x43\x0a\x74\x6e\x96\x82\x24\x0a\xe8\xce\x97\x30\x89\xbc\x47\xe1\x9c\xda\xca\xee\xb2\xdf\xc3\x32\xbc\x86\x22\x2a\x31\xc6\x7d\xe9\x88\x81\xa4\x74\xd4\x5c\xc2\x0f\x75\x18\xa2\x27\xc8\x8e\xc1\x2a\x74\xbf\x7b\xd0\xee\x9b\x93\x6f\x5d\x97\xf9\x9e\x95\xc1\x4c\xef\x7a\x25\x75\xf2\x9c\x3a\x76\x18\x3d\xc6\x7d\xef\x7f\x8c\x98\x2c\x5d\xe7\x18\x50\xfa\x9f\x93\x55\x57\xcf\x70\x1d\x15\x57\x3e\x88\x71\x96\xe7\x20\x50\x47\x51\x99\x42\x00\x96\x67\xdc\x1b\x51\xab\x79\x51\x5b\x86\xcd\xe5\x42\x0a\x3e\x0a\x83\x23\x1e\x34\xf9\x68\xfe\x46\xca\x7e\x54\x6e\x9e\xb5\x62\x2b\xca\xd9\x69\x66\x78\x72\x50\x78\xc8\x3d\xfc\xd9\x84\xad\x6c\x60\x2a\x97\xb6\xfe\x7f\x98\x7e\x50\xc0\x58\x95\xeb\x3d\x7e\xa1\x1c\xb3\x25\x1c\xf5\xbd\x32\x1f\x91\x99\x18\xbc\xa9\x98\x1a\x63\x45\x40\x65\xc3\x94\x15\x78\xd3\x80\x32\x3a\xd9\x0c\x90\xeb\x56\x9e\xe5\xd9\x36\x61\x66\x2e\xda\x1d\x37\x98\xf5\xa8\x32\xc2\xce\x54\xf5\x3a\x9d\x05\x34\xda\xc9\x84\xa8\xe8\xae\x8f\xa6\xd2\x01\x22\xc3\x11\xe1\x34\xdf\x83\x97\x61\x72\xfb\x8e\x90\xbc\xfb\x06\x4e\xfb\x27\xe8\xdf\x12\x5a\xdc\xa1\x09\x81\xe9\x35\xf3\x1f\x89\xfc\x85\x74\x17\xf0\x10\x70\x99\x51\xcf\x37\xa8\x8c\x61\xed\x45\x08\xdf\xd5\x51\x14\x65\x8b\x17\xef\x5d\x16\xf8\x65\xf3\xa7\xf6\xa5\xee\x17\x6a\x12\x8d\xa0\x27\xe2\x43\xf1\x33\x00\x00\xff\xff\x14\x68\xb5\xf3\x01\x09\x00\x00")

func manifests00ClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests00ClusterRoleYaml,
		"manifests/00-cluster-role.yaml",
	)
}

func manifests00ClusterRoleYaml() (*asset, error) {
	bytes, err := manifests00ClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/00-cluster-role.yaml", size: 2305, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfc, 0xaa, 0xc3, 0x8a, 0xd5, 0x5a, 0xc9, 0xb5, 0xff, 0x27, 0xa7, 0x81, 0xf3, 0xa6, 0x2d, 0xc8, 0xca, 0x77, 0x4b, 0x2d, 0xaa, 0x61, 0x67, 0x62, 0x4, 0x5, 0xc8, 0xe8, 0x3d, 0x52, 0x28, 0x2f}}
	return a, nil
}

var _manifests00CustomResourceDefinitionInternalYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5f\x6f\xdb\x36\x10\x7f\xf7\xa7\x38\xa4\x0f\x7d\xb1\x24\xa4\xd9\x86\xc1\xc0\x30\x04\x49\x31\x04\x6b\x83\x22\x31\xb2\x61\x59\x80\xd2\xe4\x49\xe6\x2a\x91\x2a\xef\xe4\x2c\x19\xf6\xdd\x87\xa3\x2c\xff\x51\x2d\xc5\xeb\x30\xbe\x24\x3a\x9e\xee\x7e\xfc\xdd\x1f\x9e\x35\x49\x92\x64\xa2\x6a\x7b\x87\x81\xac\x77\x33\x50\xb5\xc5\x3f\x19\x9d\x3c\x51\xfa\xe9\x7b\x4a\xad\xcf\x56\xa7\x0b\x64\x75\x3a\xf9\x64\x9d\x99\xc1\x45\x43\xec\xab\x1b\x24\xdf\x04\x8d\x97\x98\x5b\x67\xd9\x7a\x37\xa9\x90\x95\x51\xac\x66\x13\x00\x1d\x50\x89\x70\x6e\x2b\x24\x56\x55\x3d\x03\xd7\x94\xe5\x04\xc0\xa9\x0a\x67\x60\x1c\x05\xd4\x3e\x18\x4a\xad\x2b\x02\x12\xa5\xbe\xc6\xa0\xd8\x07\xf9\xc7\xd1\xd2\xe6\x9c\x5a\x3f\xa1\x1a\xb5\x18\x2c\x82\x6f\xea\x19\x8c\x2b\xb7\xd6\x49\xf4\x01\x5a\xb4\x97\xd7\xb7\x37\xd1\x51\x94\x95\x96\xf8\xe7\x7d\xf9\x3b\x4b\x1c\xf7\xea\xb2\x09\xaa\xdc\x85\x16\xc5\x64\x5d\xd1\x94\x2a\xec\x6c\x4c\x00\x48\xfb\x1a\x67\x70\x72\x22\xff\x37\x8b\xb0\x66\x63\xed\x9a\x58\x71\x43\x33\xf8\xeb\xef\x09\xc0\x4a\x95\xd6\x44\x32\xda\x4d\x41\x7c\xfe\xe1\xea\xee\xec\x56\x2f\xb1\x52\xad\x10\xc0\x20\xe9\x60\xeb\xa8\xb7\x45\x07\x01\xeb\x80\x84\x8e\x09\x94\x88\xa1\x85\x90\xae\xdf\xaa\x83\x30\xc1\xb6\xf3\x2c\x6b\x27\x9e\x1b\x59\xcf\xfe\x6b\x01\xd0\xea\x80\x91\x08\x22\x01\x2f\x11\x56\xad\x0c\x0d\x50\x04\x07\x3e\x07\x5e\x5a\xda\xc2\x88\x07\xd9\x31\x0b\xa2\xa2\x1c\xf8\xc5\x1f\xa8\x39\x85\x5b\x0c\x62\x04\x68\xe9\x9b\xd2\x80\xf6\x6e\x85\x81\x23\xea\xc2\xd9\xe7\x8d\x65\x02\xf6\xd1\x65\xa9\x18\xd7\x11\xe8\x96\x75\x8c\xc1\xa9\x52\xa8\x6b\x70\x0a\xca\x19\xa8\xd4\x13\x04\x14\x1f\xd0\xb8\x1d\x6b\x51\x85\x52\x78\xef\x03\x82\x75\xb9\x9f\xc1\x92\xb9\xa6\x59\x96\x15\x96\xbb\x0c\xd6\xbe\xaa\x1a\x67\xf9\x29\xd3\xde\x71\xb0\x8b\x86\x7d\xa0\xcc\xe0\x0a\xcb\x8c\x6c\x91\xa8\xa0\x97\x96\x51\x73\x13\x30\x53\xb5\x4d\x22\x70\xc7\xb1\x0c\x2a\xf3\x6a\x13\xe0\xd7\x3b\x48\xf9\x49\x72\x80\x38\x58\x57\x6c\xc4\x31\xed\x06\x79\x97\xe4\x03\x2b\xb1\x6c\x5f\x6b\xf1\x6f\xe9\x15\x91\xb0\x72\xf3\xf6\x76\x0e\x9d\xd3\x18\x82\x7d\xce\x23\xdb\x3b\xc9\xb1\x25\x5e\x88\xb2\x2e\xc7\xd0\x06\x2e\x0f\xbe\x8a\x16\xd1\x99\xda\x5b\xc7\xf1\x41\x97\x16\xdd\x3e\xe9\xd4\x2c\x2a\xcb\x12\xe9\xcf\x0d\x12\x4b\x7c\x52\xb8\x50\xce\x79\x86\x05\x42\x53\x1b\xc5\x68\x52\xb8\x72\x70\xa1\x2a\x2c\x2f\x14\xe1\xff\x4e\xbb\x30\x4c\x89\x50\xfa\x32\xf1\xbb\xed\x67\x5f\xb1\x65\x6b\x23\xee\x5a\x4a\xb7\x0e\xd5\x50\x8c\x9c\xa3\x6b\x69\x56\x7b\xc2\x5e\x40\xe7\x4b\x84\xa5\x27\x96\xbe\xd3\x16\x0b\xee\x54\x69\xef\xcd\x83\xb0\x65\xb5\xda\xf3\xf9\xbb\x71\x5f\xf3\x77\x90\xfb\x10\x7d\x1c\xb4\x9f\xfb\x50\x29\x96\x26\xc9\xdf\x7d\x73\xd0\xb7\x54\x56\x81\xe1\x90\x73\xd9\x1f\xf3\x7e\xb3\x51\x8b\xb6\xe4\xb0\xed\x9b\x53\xc0\xb4\x48\xe1\xe2\xfa\xfc\xfd\xdb\x29\x9c\x4f\xe1\xf6\xe6\x6e\x0a\xf3\x5f\xe7\x80\xac\x8f\x65\x80\x55\x28\x90\xe9\x45\xae\xd7\x7a\x3d\x9e\x21\x66\xb6\xa4\x6c\xef\x7d\xcb\x58\x7d\x61\x74\x04\x46\xb7\xa5\x42\x50\x4f\x2f\xe6\x51\xdb\xe5\x8f\xc8\xa4\x67\xef\xfa\xa2\x41\x6c\x43\x36\xda\xa5\xbd\x33\xf1\xb6\x3d\xb8\x3b\x68\xf4\x18\xd3\xed\x2a\x15\xf1\x3c\x28\x47\xb6\xbb\xbe\x87\x75\xb7\x19\x27\xbd\x21\x61\x5b\xe1\x88\xee\x08\xe9\xdb\x55\x21\x91\x2a\x46\x7d\x1e\x65\x27\xa0\xa2\xfd\xfb\xef\xab\xcc\x7c\x19\xe2\xaf\x32\xc3\x07\x8a\xeb\x5f\x1a\x91\xb6\x6c\x03\x9a\x21\x33\xc9\x1a\xeb\xe0\xb6\xf8\x18\xd8\x3c\x98\xdd\x5f\x2a\xf4\x8b\xa2\x5b\xc6\xd1\x6f\xde\x0d\x1c\xb0\x3f\xd6\x88\xa6\x5c\x80\x0d\xa1\x91\x11\xa0\x9d\x3e\xd6\xb3\x8d\x74\x52\x34\xb1\x5c\x52\x38\x8f\x7f\x07\x20\x6b\xe5\xe4\x56\xb2\x46\x2e\x8b\xdc\xa2\x81\xc5\x93\x8c\x21\x57\x97\x20\x1d\x52\x15\x94\x1e\x7c\xf3\xe5\x12\xb0\x83\x14\xf7\x0e\x73\x62\xe3\x4d\x2e\x9d\x68\x03\x43\x9a\xb3\xe2\x0e\x5d\x77\xc6\xdc\xba\x7e\xab\xde\x5d\x5d\x2f\xdb\x3b\xfd\xef\x0e\xbc\x83\xf3\x5f\x6e\xe3\x73\x67\x31\x47\xd6\x4b\x34\xd0\xd0\x58\xba\x01\x7c\xbc\xba\xfc\x08\x8a\x40\x20\x3a\xb8\x3f\x7d\x88\xc6\x9e\x9b\x80\xc3\xe6\xe2\x4b\x23\x36\x95\x4c\x2d\x75\xc0\xc4\x20\x63\xa8\xac\x4c\x89\xf1\xda\x13\x0f\x6f\x1e\xa6\xe2\xe2\xa7\x8b\x0f\x87\x1c\x8c\x58\xdd\xba\x1e\x77\x70\xf6\x10\x39\xb9\x3f\x7d\xd8\x4e\x1a\xc6\x6b\x4a\xd5\x23\xa5\xaa\x52\xcf\xde\xa5\xda\x57\x99\x2e\x6d\xd6\x8e\x94\x59\xc0\x1c\x03\x3a\x8d\x59\xf0\x0d\xe3\xb7\x67\x59\x81\x9c\xb4\x2c\x27\x91\xe5\x25\x57\xe5\x2b\x1f\xe3\x39\x54\x38\xb2\xee\xdf\xf4\x9d\x56\x56\x07\x4f\x3e\xe7\xe8\x13\x5d\xd2\x50\xf4\xac\x84\xe2\xcc\x21\x3f\xfa\xf0\x29\x33\x8e\x32\xf1\xf3\xe3\xca\xe2\xe3\x0f\x71\x2f\xd1\xa5\x4d\x5a\x7c\xaf\xd4\x73\xb2\xd6\x4c\x8c\xa3\x88\x28\xa1\xa5\x7f\x1c\x43\x72\xb6\x83\x44\x97\xbe\x31\x69\xe1\x7d\x51\x62\xc4\x21\xfe\x04\xde\xce\xc9\x57\xa7\x59\xa5\x9c\x2a\xd0\x48\xe1\x91\x30\x70\x32\xde\xa6\xc6\xdb\x90\x54\xd6\x70\x7d\x28\xd3\x5e\x4e\xaa\xfc\x70\xc4\x55\x73\x64\xf3\xdc\x2f\x3a\x01\xd0\xaf\xaf\xcf\x0d\x86\xa7\x83\x65\x34\xe2\x7b\x53\x60\xd3\xcd\x9c\x1d\x7f\x63\x12\xab\xa2\xb0\xae\x50\xb5\x8d\x85\xd3\xaf\x65\xc9\xe8\xb1\x2a\x69\xf3\x7f\x9d\xd6\x73\x55\x50\x4c\x6c\x56\x45\x92\xdb\x92\x31\xd0\xf4\x3f\xe4\xf1\x00\xd0\x98\xd8\x9b\x9f\x28\x7b\x69\xfd\x52\xb4\x5f\xec\xfa\x03\x0a\xc3\xf7\x51\xd2\x5d\x08\x03\x63\xd7\x41\x83\x47\x8f\x5d\x3d\xd1\xaa\xfb\x70\xb1\x3a\xdd\x3e\xc5\x9c\x4b\xd6\x5f\x1a\xe2\x06\x00\xc9\xcf\x23\x33\x03\x0e\x0d\xae\x7f\xa3\xfb\x20\x93\x46\x2b\xd9\x5e\xf4\x4a\x6b\xac\x19\xcd\x75\xff\x4b\xc2\xc9\xc9\xde\x67\x82\xf8\xb8\x33\x8e\xc1\xfd\xc3\xa4\xb5\x8a\xe6\xae\xc3\x21\xc2\x7f\x02\x00\x00\xff\xff\xf2\x56\x01\xeb\x64\x11\x00\x00")

func manifests00CustomResourceDefinitionInternalYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests00CustomResourceDefinitionInternalYaml,
		"manifests/00-custom-resource-definition-internal.yaml",
	)
}

func manifests00CustomResourceDefinitionInternalYaml() (*asset, error) {
	bytes, err := manifests00CustomResourceDefinitionInternalYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/00-custom-resource-definition-internal.yaml", size: 4452, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb8, 0x97, 0x3b, 0x70, 0x3e, 0xf0, 0xaf, 0x5e, 0x3b, 0xac, 0xca, 0xaa, 0xe0, 0xa6, 0x36, 0x5f, 0x77, 0xf7, 0x9b, 0xd4, 0x7, 0xb4, 0xbd, 0xbe, 0x2e, 0x39, 0xff, 0xdb, 0x5e, 0x7f, 0xdd, 0x95}}
	return a, nil
}

var _manifests00CustomResourceDefinitionYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3d\x6b\x73\x1c\xb7\x91\xdf\xf5\x2b\xba\xe8\x0f\x92\x72\xbb\x43\x53\xb2\x5d\x3e\x5e\x2a\x57\x34\xc9\xd8\xae\xc8\x94\x4a\xcb\x73\x2e\x39\x5d\xa9\xb0\x33\xbd\xbb\x08\x67\x80\x31\x80\x59\x6a\x9d\xca\x7f\xbf\x6a\x3c\xe6\xb1\x83\x79\x50\x92\xef\x43\xc2\xad\x72\x59\xdc\xc1\x34\x1a\xfd\xee\x06\xd0\xfb\x64\xb9\x5c\x3e\x61\x25\xff\x19\x95\xe6\x52\x9c\x03\x2b\x39\x7e\x30\x28\xe8\x2f\x9d\xdc\x7d\xab\x13\x2e\x4f\xf7\x67\x6b\x34\xec\xec\xc9\x1d\x17\xd9\x39\x5c\x56\xda\xc8\xe2\x2d\x6a\x59\xa9\x14\xaf\x70\xc3\x05\x37\x5c\x8a\x27\x05\x1a\x96\x31\xc3\xce\x9f\x00\xa4\x0a\x19\x7d\x79\xcb\x0b\xd4\x86\x15\xe5\x39\x88\x2a\xcf\x9f\x00\x08\x56\xe0\x39\x70\xb1\x55\xa8\x75\x2a\x85\x51\x32\xcf\x51\xe9\x44\x96\xa8\x98\x91\x8a\xfe\x21\xf4\x8e\x6f\x4c\xc2\xe5\x13\x5d\x62\x4a\x00\xb7\x4a\x56\xe5\x39\xc4\x07\x39\xa8\x9a\xc6\x01\x38\x2c\x7f\x74\x13\x5c\xd6\x13\xd8\x67\x39\xd7\xe6\x4f\xf1\xe7\xaf\xb8\x36\x76\x4c\x99\x57\x8a\xe5\x31\x14\xed\x63\xcd\xc5\xb6\xca\x99\x8a\x0c\x78\x02\xa0\x53\x59\xe2\x39\x9c\x9c\xd0\xbf\xab\xb5\xf2\x54\xf2\xa8\xe9\x94\xe5\xe8\xfe\x09\x90\xb3\x35\xe6\x2b\xcc\x31\x35\x52\xbd\x61\x66\x77\x0e\x89\x36\xcc\x54\x3a\xd1\xfe\x5b\x3f\x92\x68\xf0\x16\xcb\x9c\xa7\x4c\x87\x81\x25\xa6\x89\xf2\xdf\x85\x61\xf6\xe5\xe3\x81\x0e\x22\xdb\x33\x9e\xb3\x75\x8e\x6f\xdb\xef\xb8\x87\xe7\xf0\xf7\x7f\x3c\x01\xd8\xb3\x9c\x67\x96\x69\x0e\x43\xa2\xf0\xc5\x9b\x1f\x7f\x7e\xb9\x4a\x77\x58\xb0\x80\x76\x86\x3a\x55\xbc\xb4\xe3\xe0\xa4\x47\x46\xff\x7c\x8d\x1a\x18\x14\x4c\xb0\x2d\x66\x81\x52\xd0\x90\x0a\x36\x52\x81\xd9\xa1\x07\x0a\x90\xe6\x95\x36\xa8\x12\xb8\xdd\x61\x7b\x5c\xca\x04\x68\x54\x7b\x9e\x22\xbc\x2e\x51\xac\x88\xe7\xf0\x56\x56\x06\x81\x89\x0c\xfe\x54\xad\x51\x09\x34\xa8\x03\x4b\x6b\x90\x35\xf1\x13\x78\x27\xe0\xcf\x3b\x14\xc0\x44\x9f\xf1\xc0\xb5\x13\x57\xcc\x16\xc0\x40\xe0\x7d\x04\xdf\x1a\x68\x86\x65\x2e\x0f\x05\x0a\xd3\x7a\x0f\x8c\x04\x96\xe7\xf2\x1e\x48\x79\x94\x60\x39\x18\xc5\x36\x1b\x9e\xd2\x13\x85\x2c\xdd\xd1\x62\xc3\x42\x34\x98\x1d\x33\x35\x48\xfc\x50\x4a\x8d\x01\x31\x90\xca\x2f\xaf\x85\xff\x7f\x95\xc4\x19\xb1\x05\xb3\xe3\xba\x7e\x00\x05\x3b\x40\x8e\xcc\xce\x9f\x71\xad\x2a\xcb\x96\x1a\x30\xd1\xb8\xac\xd6\x39\x4f\x61\xc3\x52\x7a\x5d\xa0\xb9\x97\xea\x8e\x16\x26\x30\xa5\xc1\x1a\x98\x1e\x5c\x35\x28\xdc\x73\xdd\x06\x49\x33\xae\x11\xec\xe3\x0c\x64\x65\x2c\x6d\x77\xc6\x94\xfa\xfc\xf4\xf4\xae\x66\x06\x99\x8d\x4c\xa6\xfa\x34\x95\x22\xc5\xd2\xe8\xd3\xb0\xf6\xa5\xc7\x81\x8b\xed\xa9\x9f\x71\x79\xac\x63\xf4\xf1\x2c\xc3\x3d\x2a\x28\xa5\xd6\x7c\x9d\xe3\x02\x34\x99\xa6\x75\x8e\x90\xe1\x86\x55\xb9\xd1\x41\x90\xa0\xcc\x99\xd9\x48\x55\x00\x53\x08\x95\xc6\x2c\x81\x15\x22\x10\xed\x1b\x82\x70\xcc\x33\xfb\x46\x21\x15\xc1\x30\x8c\xe7\x3a\x39\xf1\x03\x4a\x45\xe6\xc5\xf0\xa0\xae\xf4\x69\x19\xc7\xfa\xbb\x23\x25\x78\x4a\x5a\xe2\xc6\x10\x5a\x5c\x58\x06\x23\xec\xdd\x77\x98\x81\xb6\x1a\x04\x72\x13\xf8\x57\x2a\xd4\x28\x0c\xeb\xb0\xcb\x2a\xdd\x86\x64\x54\xae\xff\x86\xa9\xa1\x05\x28\x02\x02\x7a\x27\xab\x3c\x23\xc6\xec\x51\x19\x50\x98\xca\xad\xe0\xbf\xd6\x90\x35\x09\x00\x4d\x99\x33\x83\xda\x74\x20\x72\xe1\x25\x72\xcf\xf2\x0a\x17\x56\x69\x88\x8b\x0a\x69\x0e\xa8\x44\x0b\x9a\x1d\xa2\x13\xf8\x89\xa8\xc3\xc5\x46\x9e\xd7\xac\xdd\x72\x13\xdc\x41\x2a\x8b\xa2\x12\xdc\x1c\x4e\x2d\xdf\xf8\xba\x32\x52\xe9\xd3\x0c\xf7\x98\x9f\x6a\xbe\x5d\x32\x95\xee\xb8\xc1\xd4\x54\x0a\x4f\x59\xc9\x97\x16\x71\x61\xc5\x2d\x29\xb2\x2f\x6a\xc1\x7e\xda\xc2\xd4\x1c\xc8\x70\x6a\xa3\xb8\xd8\xd6\x5f\x5b\x5b\x3e\x48\x77\xb2\xe4\xa4\x85\xcc\xbf\xe6\xf0\x6f\xc8\xeb\x14\x06\xe1\xed\xf5\xea\xb6\x51\x1a\x62\x41\x97\xe6\x96\xda\xcd\x6b\xba\x21\x3c\x11\x8a\x8b\x0d\x2a\xc7\xb8\x8d\x92\x85\x85\x88\x22\x2b\x25\x17\xc6\xfe\x91\xe6\x1c\x45\x97\xe8\xba\x5a\x17\xdc\x10\xa7\x7f\xa9\x50\x1b\xe2\x4f\x02\x97\x4c\x08\x69\x48\x7d\x2a\x52\x67\x92\xd0\x1f\x05\x5c\xb2\x02\xf3\x4b\xa6\xf1\x37\x27\x3b\x51\x58\x2f\x89\xa4\xd3\x84\x6f\xfb\xf2\xee\x40\x47\xad\xfa\xeb\xe0\x9f\xa3\x1c\xa2\x87\xc4\x20\x6b\xfb\x4a\x4c\xf9\x86\xa7\x56\xe6\x9d\x2a\x90\x06\x6a\xae\x30\x83\x35\xee\xd8\x9e\x4b\x15\xbe\xef\x19\xe9\xa4\x35\x45\x4c\x4d\xdd\xd4\xd6\x24\x5c\xd2\x33\x3b\x11\x76\x9f\x1f\xfb\xae\xfe\x78\x27\x4c\x0a\x37\xa8\x50\x90\xa8\x48\x92\x2d\x4c\x15\x1a\x6b\x15\x19\x17\x6d\x22\xd5\x84\xd9\xd5\xf6\x08\xd2\x16\x34\x32\x79\xb4\xb8\x83\x1d\xd1\x37\xaf\x89\x73\x4a\xd6\xda\xeb\x1e\xd4\x4c\x8a\xa7\xc6\x93\xcd\x42\xe0\x0a\xe4\xbd\x68\xcf\xb0\x88\xac\x99\xd6\xe0\xcc\xdf\x3b\xd1\x83\x79\x6b\x9d\x90\x5d\x4f\x51\xe9\x7a\x51\x16\xbf\x8d\x24\x0f\x46\x3a\x73\x87\x07\x6d\xed\x84\x95\x00\xb2\xc4\x00\x26\xd7\x49\xaa\xcc\x31\x45\xa1\xb3\xe0\x0d\xcf\x9d\xf3\x26\x2d\xf2\x2f\xdd\xe1\xe1\x9c\x20\x1e\x3d\x7c\x27\xe0\xc7\x0d\x54\x42\xa3\x59\xf4\x60\x32\xb8\xe7\x79\x96\x32\x95\x75\xc0\x13\x77\x2a\x23\x0b\x66\x78\xca\xf2\xfc\x00\x5b\x14\x14\x0e\x62\x66\xb1\x75\xab\xb6\xf1\x43\xf3\x52\x0f\x36\xd7\x2e\xd2\xa9\x1d\x47\xc4\xed\x65\xb2\x20\xaa\x3c\x23\xa8\xba\x5a\xbb\x3f\xf5\x73\x3b\x4b\x3b\x68\x09\x9f\x06\x8f\xd6\xcc\x4f\x35\x5c\x5e\xd0\x42\x72\x52\xf9\x2e\xe2\x64\x94\xb7\xee\x8d\x7b\x6e\x76\x51\xa0\x3e\x22\x7a\xaa\xc1\x28\xe2\x95\x36\x52\xa1\x75\xb7\xb7\x16\xeb\x65\xa5\x3b\x2b\x85\x67\xf7\x3b\x34\x3b\x54\x0d\x3a\x3d\x98\x52\x11\x95\xd4\xd2\x2b\x23\x66\xcf\x67\x22\x58\x87\x5e\x4f\xfb\x82\xba\xae\x78\x6e\x96\x5c\xc0\xeb\x8b\xca\xec\x9c\xd4\xab\xda\xa9\x86\xcf\x90\xd6\xd2\xc7\xe6\x04\xbd\x6f\x8f\xcd\xfd\x0d\x2b\x30\x18\x08\xaf\xa3\x26\x6a\x34\xc7\xc2\x10\xb9\xa7\x38\x04\xef\x4f\x7d\x0c\xb2\xa4\xe5\x2d\x9d\x51\xd3\xa7\x36\x8d\x38\xfd\xc2\xfe\x2f\x82\x0f\xc0\xed\xeb\xab\xd7\xe7\x70\x91\x65\x20\x2d\xa9\x2b\x8d\x9b\x2a\x77\x81\x85\x4e\x5a\xd1\xc2\xc2\xfa\xae\x05\x54\x3c\xfb\xcf\xa7\x11\x50\x51\xab\xdb\x7e\x74\x64\x67\x2d\x39\xac\x1c\x4e\x18\x35\x27\xba\xd6\x90\x5d\xdd\xac\x2c\x69\x43\xdc\x39\x62\x8a\xfa\x2a\xe8\x5c\x2b\xe9\x14\x99\xc1\x54\x8a\x0d\xdf\x56\x0a\xa1\xa8\x72\xc3\xcb\x1c\x61\x83\x8c\x3c\x8d\xb6\x06\xe2\x77\xf0\x47\xaf\x4e\xaf\x24\xcb\xbe\x63\x39\x13\x29\xaa\x95\x9b\xb7\x07\xbc\x76\x9f\x36\x3a\xd5\x3b\x32\x3a\xda\x90\xb8\x6d\x0f\x0b\x68\x96\x00\x91\xf9\x69\x51\x14\xb2\xa8\x4c\x27\x3d\xc0\x36\xe2\xf3\xc0\xdf\xd4\xb0\x57\x1e\x74\xe2\x30\xb5\x46\xb7\xa2\x3c\x0e\x58\x4b\x75\xbd\x29\x1d\x33\x70\x0b\xe7\xef\x5b\x3a\x17\xb4\xc7\x99\x14\x17\x72\x7b\xfc\x2d\x05\x8d\x6e\x19\x90\x38\xbe\x7d\x13\xee\xf1\x24\x35\x77\x11\x0d\xd7\x81\x52\x8e\x1a\x5c\x64\x7c\xcf\xb3\x8a\xe5\x3d\x88\x2e\x75\x70\x89\x1d\x6a\xd0\xd2\xe6\x1a\x44\x14\xb2\x17\x8a\x68\x7a\x27\xe4\x3d\xdc\xef\x50\x59\x07\x67\x98\xda\xa2\x69\x12\x97\xab\x9b\x55\x0f\x68\xa0\x37\xe1\xe5\x57\x67\xdd\x07\x85\x32\x82\xff\x52\x21\xb0\x42\x12\x39\xf3\xbc\xef\xba\xb5\x8d\x39\xfb\x64\xed\x47\x43\xce\x27\x60\x51\x9a\xc3\xa2\x09\xf0\xed\x7a\x2d\xcc\xc4\x49\x41\x27\xf7\x3f\xf5\x66\xb2\x07\xdf\xa5\xc8\x0e\xdb\x9e\x31\x1a\xd4\xbe\x61\xe1\x19\x57\xbb\xe1\xf7\xda\x5a\xe4\x99\xd8\xd6\xc1\x3e\x5d\x1a\x37\x14\x80\x5a\x1a\x38\x7b\xe3\x93\x27\xbd\x00\x14\x94\xce\x43\x2e\x59\x06\x6b\xaf\x6f\xb5\xd9\xa6\x90\xaf\xef\x56\xd1\xa4\x49\xc7\xf1\x76\x22\x17\xae\x61\xcd\x08\x51\x29\xc8\x9e\x2a\xa6\x8d\xaa\x6c\x30\xf9\x40\xba\xbb\x8a\x43\xc8\xc7\x7c\xfc\x70\xf1\xe7\xd5\xb9\x1b\x10\x31\x10\xf0\xcc\x3a\x99\x6b\x2f\x83\x3d\x98\xb6\xaa\xf2\x9c\xa0\xfc\x5a\x29\x3c\x9f\x07\xa5\x79\xeb\xfb\xcb\x37\x7d\xef\xf2\x6e\x26\x32\x0d\x98\x57\x7c\xbd\xe7\xca\x9c\x03\xfc\x20\xb5\xb9\x71\x9c\xe8\xc3\x15\x70\x21\x0e\x9e\x5d\x75\x52\x6a\x63\x6f\x78\xc6\x45\x9a\x57\x19\x59\x9e\x1b\x29\xf0\x79\x4d\x7b\x23\xdb\x30\xfb\x76\xe2\x9d\x18\x91\xcc\x88\x2a\x3d\xc4\xf9\xee\x9a\x89\x27\x7d\x70\x6b\x2c\xec\x64\x9e\x69\x28\x99\x62\x05\x1a\xb2\x2c\x21\xa0\x6a\xad\xa4\xc6\x3a\xea\x4c\x23\xd6\x3f\x81\x37\x2e\x09\x03\x29\x28\x0c\xd9\x58\xca\x91\x6c\x8e\xd2\x67\xc4\x69\xd2\x27\x6f\x71\x79\x72\x8d\xed\xc1\xc3\x8b\xec\xe8\x5d\x0c\x21\x18\x5c\x49\x44\xe6\x62\x00\xc6\x78\x06\x41\x29\xe2\x8f\x8e\xd3\x30\x1a\x69\x9d\x06\x79\x17\x9f\x8e\xd9\xef\x98\x81\xfb\x1d\xf7\xd5\xa9\xce\x92\x06\xe0\xda\xf8\xd9\x15\xac\xb2\x04\xde\xf8\xba\x8c\x2f\x1c\xd8\xd2\xcb\x49\x50\x9c\x13\xeb\x01\x4f\x7e\xf4\xf5\x87\x93\x38\x91\x46\x23\x21\xb0\xbe\xe7\x97\x8a\x72\xc4\xd8\x4a\x97\x6e\x19\x0f\x15\x87\x52\xf1\x7d\x24\x3b\xec\xd1\xcd\x8f\x1b\x16\x82\x37\x7e\x40\x24\x9e\x89\xb3\x6c\x52\xca\x3d\xc4\x07\x4b\xb8\x7d\x38\xb5\x9e\x93\x30\x8b\xad\x97\xf5\x95\x8f\xcc\x50\xa5\x31\x81\x9f\x6d\x34\xe3\x98\x1a\x5d\x08\x23\x2b\x6c\x83\x94\x98\x01\x7d\x27\xc0\x5b\x29\x2f\x6c\x33\xe2\x4d\xb0\xc1\x9e\x8b\xc9\x5a\x35\xdd\x36\x78\x08\xca\x62\x7d\x98\x70\x25\x99\x10\x18\x5a\x9f\xd7\x77\x79\xe0\xd3\xf3\x58\x92\xd7\x54\x72\x6d\xa8\xe4\x73\xe1\xc6\xc9\x72\xb1\x4d\xe0\x22\x0a\x32\x86\xd6\x51\x3d\xb8\xed\xeb\x9b\xa9\xa2\x59\x39\xb8\x48\x70\x5e\x02\x13\xab\xa3\xfa\xef\x4e\xbf\x20\x15\x1e\xd5\x60\xe7\xfd\x9b\x08\xdb\x46\x01\xad\x74\xbb\x89\xae\xeb\xd0\x36\x14\xf1\x8d\x8c\x1b\x71\x2b\xf8\xcc\xf4\x82\xff\x40\x97\xa7\xba\x09\x2e\x29\x1b\x49\xda\x21\xfc\x90\x74\xd5\xb3\x3a\x05\x11\xf6\x9d\x5f\xa5\x40\xed\x4b\xac\x36\x97\xc9\xc4\xc3\x62\x42\xa8\xe3\x42\x57\x16\xff\xab\x14\x6e\x17\xc1\x7f\xe9\x94\x8f\xbe\x75\x5b\x06\x6d\xaa\x38\x84\x8a\xe3\x4a\x5f\xf8\x10\xf3\x2b\x45\x29\x69\x7e\x00\x5d\x95\xa5\x54\x26\xa0\x2f\x5d\x81\xe5\xe2\xcf\xab\x85\x8b\x60\x5c\x15\xf6\xfb\xcb\x37\x75\x80\x10\xc9\x0d\x3c\xbb\x7e\xd7\xf1\xa7\x33\x54\x8b\xa6\x13\x32\x43\x20\x14\xe2\x04\xf6\xc1\x7f\xfc\x75\xae\xbd\xbc\x86\x90\xfc\xb3\x6b\x1a\x45\x11\x2d\x25\x5b\xc0\x5a\x56\x91\x0c\xc1\x42\x94\xad\xb5\xc0\xb7\x5f\x5a\xc2\x7d\xf5\xd5\x4b\x57\xe7\xa1\x8c\x06\xdc\x86\x48\x29\xfd\xc6\x00\xd9\xe6\x80\xea\x90\x1d\x66\xa2\x11\xc9\x6e\x00\x1d\x0f\xd2\xdb\x8b\xd9\x73\x36\xb8\xf6\x06\x55\x9f\xc2\x05\x07\xf1\x4e\xc0\x95\x44\x0d\x14\xa6\x8d\xc3\x1f\x94\x83\x38\x1b\x66\x92\x3c\x0a\x34\x66\xf0\x16\x21\xf1\x27\x4c\xf1\x43\x99\xf3\x94\x93\x44\xd7\xe9\x67\x43\xf8\x28\x4c\x9b\x16\x16\x4c\x54\xb6\x8a\x34\xb1\xd4\xe3\x28\x15\xc6\xa3\x81\xa1\x48\x60\x69\x5f\x9a\x5b\x44\xb1\xb5\x9d\x92\xa5\x18\xb6\x5e\xc7\x13\xbb\xde\xf0\x76\x3e\xb7\xe1\xb9\x41\xe5\xb7\xf6\x0c\xc8\x4d\x03\xbd\x4f\xf2\xe9\x22\x0c\xd1\x96\x6b\x3f\x81\x2d\x2b\xd1\x74\x45\x99\x5b\xb3\x13\x13\x66\xbd\x63\x21\x2f\x1f\x4c\xea\x44\xc0\x93\xfc\xd9\x43\x12\x83\x82\x99\x74\x77\xfd\xa1\x24\x2c\x29\xa1\x9c\x8c\x2f\x8e\x5f\x70\x55\xa8\x9c\x6b\x4b\x1a\xbb\xdf\x0d\x61\x6b\x3b\x70\xb3\xb0\x1b\x2e\xf1\x5a\x9b\xad\xf3\x35\xa3\xac\x5f\xb8\xb8\xb9\xc2\x2c\x36\x9e\x1b\x2c\x06\x22\xe5\x0e\x92\x17\x23\x88\xf8\xcd\xa4\xf0\xc4\x56\x4e\xbc\x96\xc4\x55\x08\x7c\x90\x44\x3e\xf4\x0e\x0f\x4e\x7b\x98\xa8\x8f\x29\x38\x10\x0a\xf3\x3a\xee\xbe\xc3\x83\x1d\xe4\xb7\xda\xe2\x2e\x75\x22\xf2\x07\x82\x32\xf4\xe8\x68\xb9\x34\x9f\x8f\xf8\xdc\xba\xe9\x0b\x8b\x95\x93\x5a\xbf\x54\x56\x96\x39\x1f\xb0\x13\xee\x63\xe4\x50\x00\x3f\x19\xc2\x83\x3b\x4d\x60\x29\x32\x13\xed\x9a\x80\xcd\xae\x9c\x23\xf1\x53\xed\xc8\x49\xf2\xb5\xe3\xa5\xdd\xa2\x19\xc1\xda\xab\x65\xd8\xd8\x74\x81\x6d\x00\xee\x24\xea\x47\xb1\x80\x1b\x69\xe8\x7f\xd7\x1f\xb8\x36\x3a\x5a\xae\x6a\x3e\x64\xc8\x6f\xa4\xb1\x63\x3f\x89\x24\x0e\xa9\x99\x04\xf1\x19\x16\x09\xa8\x00\xa6\x14\x3b\xd0\xba\xda\xfb\x9e\x3a\x21\x1b\x40\x5c\x0d\xeb\x1b\x59\x04\xd7\xe4\x50\xa4\x0a\x2b\x37\xbb\x56\x12\x47\xc0\x43\x7d\x4f\x48\xb1\xb4\x15\xb9\x00\x7d\x04\x68\xcd\x34\xae\x03\x29\xa5\xea\xd0\x6b\x60\xa2\x11\x98\x6b\x04\x3f\xbd\xb5\x8d\xee\x1d\xb7\x87\x9e\x33\xb2\xa6\x99\x75\xf3\x6e\x0f\x98\xb2\x18\x9e\x42\x81\x6a\x3b\x86\x67\x49\x76\x6a\x98\x75\x23\x96\xc4\x7d\x66\xf0\x36\x0c\xb2\xf8\x46\xc7\x8c\xe5\xb5\xe4\xd3\xee\x30\xfe\xde\x72\x9c\xbd\xa3\x59\xe2\x38\x56\xd6\x7c\xbf\x22\x23\x11\x5d\x3d\xcb\x32\x7b\xce\x8b\xe5\x6f\x26\xec\xd3\x04\x7d\xfa\x3e\xc3\x4d\xea\xac\x6f\xc1\x4a\x92\xec\xbf\x93\x39\xb5\x82\xf2\x0f\x28\x19\x57\x3a\x81\x0b\x7b\xf6\x2a\x8f\x73\xb6\x3d\xde\x6f\x68\xb6\x41\x13\x54\xae\x81\x68\xbe\x67\x39\x99\x7a\x32\x1c\x02\x30\x1f\x0e\xe9\xe5\xa6\xe7\xd1\x16\x70\xbf\x93\x1a\xfd\x7e\x26\xe6\x36\x54\x3a\xb9\xc3\xc3\xc9\xa2\xa3\x79\xc0\xe3\xa6\xf4\xe4\x47\x71\xb2\x08\xdb\x88\x5d\x3d\x08\x7e\xc6\xa5\x0c\x27\xf6\xd9\x49\xd2\x73\x82\x83\x09\xd3\xa0\x63\x1c\x91\x88\xe1\x20\x49\x66\xf8\x86\xf4\x8b\xe6\x9c\x08\x90\xda\x43\x7d\x55\x5a\xd7\xa1\x63\x88\x6e\x40\xee\x43\xa0\x94\xee\x30\xab\xf2\x98\x68\xf8\xbd\xbd\x58\x60\xd4\x09\x70\xea\xad\x81\xee\x51\x9f\x9b\x36\x26\x3d\xe0\x83\xa7\x7e\xc2\x67\x74\x83\x52\x66\x83\xf1\x62\x9c\x24\xed\x70\xb1\x4e\x0d\x8e\xdc\x6d\xd6\xda\xdb\x18\x8c\xd0\x7b\x01\xfd\x78\xb8\xe7\xcb\xed\x6b\x34\x2c\xe9\x96\x11\xe4\x80\xb6\xe6\x5c\x54\x1f\xfc\x1a\x97\x4a\xe6\x78\xf4\x1e\x65\x06\xa8\xce\xe1\xe9\x53\x3f\x6f\x3d\x6b\xbd\x8b\x1c\x2f\x76\x1d\x07\xcc\x24\xf6\xde\x6c\xeb\x36\xd6\xd1\x3c\x60\x2a\x06\x9a\x13\x9c\xf6\x38\xf3\x99\x03\x54\x78\x70\x90\x0a\xd3\xee\xe5\x53\x82\xd5\x11\x9f\x55\x9b\x97\x07\x06\xac\x23\x20\xe7\x84\xb2\x30\x2b\x9c\x85\xa9\x90\xb6\x47\x98\xcf\x16\xd6\xc2\x44\x68\x0b\x73\xfd\xfd\x9c\x10\xb7\xb7\x8c\xb9\x61\xee\xe4\x02\xac\x24\x3c\x3c\xd4\x9d\x80\x4b\xdc\x9d\x17\xee\x3e\x80\x4c\x53\x61\x6f\x8f\x48\x0f\x08\x7d\x27\xd6\xd3\x0e\x50\x1f\x1a\xfe\x4e\x80\x3e\x0a\xbd\xe7\x85\xc0\x53\xe4\xef\xa0\x32\x2f\x0c\x9e\x00\x79\x14\x24\x4f\x85\xc2\x30\x27\x1c\x86\xf9\xbc\x9f\x0e\x8b\x61\x32\x34\x86\xd1\xf0\x18\xa6\x43\x64\x98\x0e\x93\xe7\x60\x3a\x11\x2e\xc3\x83\x42\x66\x98\x47\xc3\xdf\x24\x74\x86\xdf\x26\x7c\x86\x4f\x0b\xa1\xc7\x36\x20\x7f\xa3\x30\x1a\xa6\x42\x69\x98\x9b\x60\x0d\xed\xd2\xc9\x1c\xfd\xe9\x8c\x19\x9b\x75\xcd\xe0\x6e\x9c\xd2\x7e\xf0\xe9\x81\xe4\x6d\xb7\x5a\x48\x4c\x25\x43\x63\x67\xb3\x03\x56\x18\x17\x9b\x39\x9b\x55\x9d\x62\xf5\x29\x31\xc6\x2c\x99\xc8\x96\xcd\x12\x4e\x63\xc1\xdf\xdc\x5a\x1e\xe1\x5e\xca\xcc\x15\xc6\x6f\x6b\x98\x76\x1d\xc6\xb0\xd4\x1f\x97\xf2\xb3\x0d\xda\x5b\x26\x0e\x60\x71\x73\x11\x84\x95\x58\x1f\xa2\x1a\x65\xcf\xba\xfd\xbe\x56\x8f\x05\x6e\x36\x98\x9a\x3f\xf8\xcd\xca\x61\x9f\x63\xa1\xd0\x90\xda\x25\xfc\x3e\xfc\xeb\x0f\x1f\x5b\xf6\x73\x73\xcf\x8c\x1d\xaf\xed\xe0\xa3\x6d\x7f\xb7\x4c\x07\x87\x48\x63\xb1\x4c\xe0\x9a\x58\x3e\x62\xb7\x0b\x64\x42\xbb\xc1\xf6\x90\x57\x1b\x8c\xf6\xc7\x98\xeb\x6c\x60\xe1\xee\xc2\xe0\xe8\x0e\xb2\xa7\xbc\xa2\xb4\x6d\xe5\x52\x42\x5c\xc0\x1b\x7b\xae\xb3\xf9\xc6\xea\xf8\x8d\xbc\xfe\x80\x69\x15\xdf\x15\x77\x9f\x19\xa6\x73\x7e\xc9\xf4\x4f\x4d\x6c\xe9\xd6\xd9\x89\x2d\x1b\xd1\x9d\x57\x34\x75\xb4\x1d\xa0\xe0\x1d\x1e\x9a\xb2\x9d\x8f\x69\xdd\xf9\xb7\x39\x65\xb6\x10\x19\xb8\x40\xe3\x3f\xc2\xfe\x50\xb1\xe6\xc2\x21\xe8\x26\x0d\x6c\x1e\xe3\x43\x9e\xd7\x66\x94\x12\x82\x3c\x77\xa8\xfd\x3f\x56\x7c\x5f\x3f\xa0\xe2\x3b\x1e\xe9\xd9\x85\xc4\x03\xe0\xa6\xc0\x0b\xd7\xbf\x54\x2c\x4f\xe0\xaa\x39\x66\x38\x02\xd2\x0f\xf6\xaf\xf7\x3c\x61\xbd\x7d\xbe\x91\x2a\xdc\xb3\xf1\x27\x2f\xc7\x88\x6e\x6d\x57\xca\x44\x6d\xa0\x1a\xc9\xd0\xf6\x26\x10\x94\x4c\x19\x9e\x56\x39\x53\x40\x3a\xbc\x95\x6a\x24\x10\x9d\xc1\x93\x46\x78\x57\x98\x4a\x91\xcd\xcd\x43\x6f\x8f\xdf\x6b\x73\xc9\x9e\x26\x41\xc5\x65\x66\xbd\x13\x2f\xc6\x98\x73\xa4\x42\xcf\xdc\xf1\xa3\x20\xc9\x72\x13\x6c\x53\xad\xf4\x0b\x77\x94\xee\x9e\xeb\x71\xb0\x5c\x37\xe1\x04\xdf\x0a\xa9\x30\x7b\xde\x58\xfe\x46\x9b\x13\xf8\xee\x10\x1c\xde\x98\x96\x71\x13\xb6\x41\x6d\xbd\xc3\xe3\xe9\x15\xca\xb3\xab\x31\x11\x1b\xa9\xec\x4d\xb5\x67\xd9\x98\x18\xd9\x4d\xd5\x3d\x4f\xcd\xf3\x04\xfe\x8a\x4a\x5a\x41\x14\xb8\x65\x86\xef\xeb\x38\x26\x9c\xbb\x30\xfe\x2c\x09\x1b\x33\x30\x5f\xc2\x33\x0b\x10\x78\x51\x60\xc6\x99\xc1\xfc\xf0\x3c\xec\x30\xea\x83\x36\x58\x0c\x0b\xcc\x46\xaa\x82\x99\x73\xe0\xc2\x7c\xf3\xd5\x84\x58\xd9\x93\xa5\x83\xc7\xc2\x2c\xea\x33\x65\xe9\xe7\x70\xa4\xb9\xa1\x9e\x3b\xe5\x7c\x24\x1a\xde\x0d\x4f\x58\xd7\xc1\xbc\xab\x95\x67\x85\xfb\x73\x21\x89\x1a\x35\xae\x41\xd8\xe0\x6f\x24\x93\x0c\x14\xda\xeb\xbe\x5e\xaf\x3e\x41\xfb\x3e\xba\x32\x3f\xf8\x62\xb8\xff\x3b\x5a\xa0\x0d\x83\x02\xc5\xc3\x95\x2b\x51\x15\x6b\xb4\x17\xae\xa2\xf7\x3e\xdd\x4b\xfd\xe5\x46\xaa\xb0\x46\xc2\x8b\xe3\x81\x2d\xd1\x7a\xf9\x22\xba\x9e\x98\x40\x29\x59\x99\x99\xfb\xf2\x9d\xa1\xe3\x7b\xf2\xee\x7e\x55\xbd\xff\xde\x5b\xd2\xc7\xef\xc7\x87\xfd\xf7\x1e\xc8\xc7\xfd\xf8\xc7\xfd\xf8\xf8\x72\x1f\xf7\xe3\x1f\xf7\xe3\x23\x9f\xc7\xfd\xf8\xc7\xfd\xf8\xe3\x67\x8f\xfb\xf1\xdd\xcf\xbf\xf0\x7e\xbc\xc9\xf5\x0a\xd3\x4a\x71\x73\x78\xa3\xe4\x86\xe7\x13\x57\xdb\xfb\xe3\xeb\xf2\x8c\x3d\xf3\x4d\xc1\x8b\xbb\xc6\x70\xfb\x6a\xd5\xee\x06\xd2\xc3\xd7\x86\x3c\xfd\x66\x3d\xf3\xae\x91\xd1\xf7\xac\xe4\xee\x46\xf0\xc3\x8e\x6a\x87\x76\x0d\x76\xa6\x1b\x69\x93\x2d\x7b\x5b\xa5\xbe\xbb\x49\xc0\x5f\xe7\xd9\x02\xec\x0d\x13\x9f\xfd\x38\x66\xfe\x24\x33\x54\xfd\x73\xf6\xa5\x27\x85\xbd\x8c\xe5\xb0\x76\xd9\x26\x65\x5f\xe1\x61\xa7\x64\x69\x8f\xc8\x57\xae\x3f\x84\x91\x90\xee\x98\x88\x58\xb2\x35\x9a\x7b\x44\x41\x8e\x10\x99\x26\xc3\xff\x47\xa9\x00\x3f\x30\x0a\x15\x17\xb0\xe5\x7b\x14\x64\x10\x3b\x1d\x10\xdc\x5d\x0b\xdf\xed\xa0\x59\xc0\x20\xd2\xe1\x4c\x36\xd1\xd5\x4f\x04\xff\x9d\xfc\x25\xf9\x2b\x2d\x19\xaa\x72\xab\x58\x86\xae\xdd\x4c\xeb\xe1\xbf\x9d\x41\x11\x31\x2d\x29\xa3\xb9\x5d\xdb\x97\xf8\xc2\x8d\xb4\x97\xc2\x9b\xf2\x72\x3c\x44\xee\xa7\x52\x0a\x75\x95\xdb\xe0\x98\xd3\xa2\x69\x58\x68\x13\xd3\xb0\xd1\x9a\x03\x2e\x78\x51\x15\x56\x02\x7d\xab\x94\xb6\xb4\xf5\x71\x6e\xc4\x8f\xd8\x72\x96\x9c\x35\x9a\x5b\xb0\x0f\x3d\x58\x76\xcc\x8b\x04\xe0\x42\xd8\xa0\xdd\x13\xbe\x07\xb7\xe9\xca\x42\x16\x32\x0d\x6c\xaf\xf1\x74\xc2\x64\x41\xb7\x05\xa8\xb9\x75\xd7\x83\x68\x53\x91\x35\x3a\x22\x73\x13\xec\x85\xb6\x30\xce\x92\x97\x0f\x8a\xfa\x53\xdb\x6e\x6b\x7a\xbb\xc0\x8d\x73\x36\xdb\xde\xf1\x0f\xf7\x24\x68\x52\xed\x8d\x41\x58\x41\x02\xdf\xc5\xcd\x36\x7e\x30\x64\xd8\xf2\x03\xa4\x4c\xd9\x9c\x27\x5c\xca\xf1\xf0\x03\x09\x28\xa1\x14\xee\xd6\x73\x47\x70\x06\xf6\x1f\x98\x20\x71\x4a\x99\x61\xda\x28\x59\xee\x78\x9a\x10\x5f\xbc\x8e\x1c\x03\xcf\xa5\xbc\xd3\x90\xf3\x3b\xd7\xad\x25\xee\xd5\xec\x39\x97\x94\x97\x3b\x54\xda\x5d\x2d\x5d\xc2\xf5\xe5\xd5\x0f\xd7\xcb\xeb\xcb\xab\xd5\xc5\xf2\xf2\x87\x8b\xcb\x1f\x2e\x5e\x7c\xb9\x7c\xf3\xfa\xd5\x5f\xce\x5e\x7e\xf9\x75\x67\xcc\xdb\xd8\x88\xf8\x3c\xc7\xaf\x5d\x5c\xaf\xce\x5e\x7c\xbb\xfc\xfe\xf2\xa7\xe5\xea\x87\x8b\x17\x5f\x7f\x13\x99\xbc\x37\x66\x08\x74\xc1\xc5\xed\xab\x55\xdd\x7f\xed\xf6\xd5\x6a\x7f\x96\x9c\xc5\x36\x45\x44\x95\xdb\x0e\x5e\xe7\x60\x54\x15\xe3\xde\x54\x9a\x12\x68\x35\x67\x6f\xf1\xc4\x0f\x6e\x67\xd6\xad\x56\x24\x1e\x16\xb0\x7c\x2b\x15\x37\xbb\x62\x38\x53\xb1\x7a\x44\x0e\x51\xe0\x56\x1a\xee\xae\xda\xbb\x18\x91\x00\x91\x74\xee\x98\xc8\xf4\x8e\xdd\x61\x02\x75\x19\x58\x47\xed\x56\xf8\x28\x2c\xe4\x1e\x01\x85\x51\xdc\x25\x72\x5c\x39\x67\x2f\x32\x0d\x99\x74\x75\x3b\x77\x0b\x27\x81\x8e\x39\x1e\x46\xd4\x19\xe4\xab\xeb\xd5\xf2\xf2\xbb\xcb\x97\xc4\x37\x80\x67\x07\x56\xe4\xcf\xcf\xa3\xc2\xd6\x1e\x19\x63\x18\x4c\xc7\xae\x73\x4a\xb6\x53\xdb\xd0\x1d\x01\x9a\xc5\xdb\xce\x2b\x43\x1c\xb6\xe6\x99\xe5\xc1\x9c\x0e\x2e\xc1\x1f\xda\xf3\xe6\xd1\xc8\x54\xe6\x8e\xe7\x5c\xcf\x62\xf9\x20\xe0\x8e\x0f\xf5\xcc\x69\xd9\x77\xef\x01\xce\x92\x17\xd6\x0b\x9c\x25\x2f\x03\xb3\x06\x21\x5a\x26\xce\x57\x38\x98\x66\xd0\x68\x74\xcf\x5b\x6e\x7d\xda\x7e\xb7\x47\x3b\x2b\x1e\x33\xdc\x75\x6c\x75\x3e\x74\x91\x30\x6c\xcb\xde\xf3\x3b\x9e\x14\xf2\x57\x9e\xe7\x2c\x91\x6a\x7b\x1a\x02\xc2\x53\xd7\xdc\xea\xfd\x8a\x67\xf8\xfe\xf6\xd5\xea\x8b\x76\xf8\xf1\x3e\x95\x45\xc9\x0c\x5f\xf3\x9c\x9b\xc3\xfb\xe4\xc5\xb7\x0a\x53\x59\x14\x28\x32\xcc\x92\x17\xff\x3e\x64\x89\x89\x05\x47\x56\x7b\x54\x77\x6e\x5f\xad\xde\x5f\x5c\xaf\xde\x9f\xbd\xf8\xf6\xfd\xf7\x97\x3f\xbd\x1f\x37\x92\xed\x37\x5e\x7c\xfd\x4d\x78\xe3\xe5\xb7\x5f\xb5\xc0\x05\x6b\xfe\x3e\x58\xf3\x19\x40\x47\x4d\x36\xc0\x94\xe1\x7f\x00\xe8\x17\x5f\x7f\x13\x5e\x6c\xd0\xee\x80\xee\x8e\x98\x0b\xfa\x33\x7b\xb9\x29\x1f\xf7\x60\x7c\xa3\xea\xf6\xe2\xa3\xfc\xdb\xa8\xb2\x15\x36\x4a\x9b\x56\x33\x37\x6e\xa6\x82\x7d\x84\x32\xb9\x68\xb1\xab\x46\xff\x44\x4a\x13\x65\xe7\xcb\xcf\xcf\x4e\x99\x47\x0b\x31\x5d\x5e\xca\x3c\xfb\xed\x18\xf9\x3a\xcf\xde\xaf\x59\x7a\x77\xcf\x54\xf6\x4f\xcb\xce\x47\x1b\x18\x01\xfd\xd9\x6d\x60\xfb\xa5\x71\x5c\x3b\x5c\x98\x4b\xdf\xb7\xc7\xaf\x8c\x82\x74\x0f\xa3\x50\x63\xe0\xe2\xb0\x68\xdd\xe3\x5c\x7c\x18\x07\x9b\x97\x46\xe0\x8d\x60\x3e\x46\x86\x3e\xa0\xe6\xd9\x83\xa4\x79\x48\x82\x63\x93\x76\x26\x9b\x00\xda\xa5\x74\x8f\x14\xdd\x84\x64\x4e\xbc\xef\xac\xf2\x97\x9f\xdf\x2a\x3f\xac\xcb\x88\x14\xf6\x40\x47\xa4\x46\xe7\x4b\x2a\x52\xf9\x66\xe2\xf1\x24\xe0\xb2\x2e\x0a\xec\x79\xe6\xb7\xeb\x98\x33\xc1\xed\x64\xa5\x69\x86\xd6\xf1\x03\x43\x3b\x79\xd6\x37\x34\xbd\x5c\x92\x3e\x7e\xad\x12\xa2\x4d\x5c\xe7\x42\xd5\x9f\xea\x72\xde\x36\xa1\xf6\xfb\x19\x45\x15\x7f\x78\xb3\x9e\x9d\xd9\x46\x88\x06\x85\x71\x88\xf8\x33\x48\x78\xb0\x6d\x6c\x5d\xed\xd2\xdf\xc3\x1a\x3a\xa3\xc3\xb4\x2d\x09\x86\xe4\x9f\xd9\xeb\x52\x7b\xcc\x65\xe9\xef\xef\xe0\x07\xae\x6d\x71\xaf\x3d\x64\x23\x2b\x31\xd8\x1f\x64\x4d\x48\x59\xf2\x51\x7a\x7f\x85\x25\x0a\xdb\x00\x4b\x0a\x28\x15\xa6\x5c\x63\x7e\xf0\xa7\x6b\xda\x30\xeb\x86\xe5\xf1\x1d\x0d\x09\x8c\x16\x9e\xa2\xf6\x85\x5c\xbb\xab\x1d\xba\x53\x63\x56\xa5\x91\x2e\x58\xf0\x51\x7d\x17\xe3\x6d\x6f\x5d\xe7\xf4\xd6\xb0\x6e\xc7\x25\xfb\x38\x6c\xf4\x16\x52\xdb\xa6\xcd\xae\x39\x88\x5c\xfb\xbe\xb0\x7e\xd0\xa7\xb4\xbc\xed\xb5\x75\x1f\xdd\x16\xe8\x8d\xb6\x39\x7a\x7d\x0e\xa4\x46\xac\x1e\x07\x47\x1d\xe6\x5b\x13\xa7\xa9\x54\x96\x8f\x83\xa5\xe1\x76\xd7\x9b\xa3\xf7\x3f\xee\x74\x48\x2a\x85\xdb\xf1\x1a\x5f\xe5\x49\x33\xae\x7b\xe0\xa1\xf5\xbd\xaf\x1b\x73\xe5\x99\x10\x6d\xcb\x73\x51\x93\xc1\x1f\xfb\x9a\x6c\xb5\x41\xd3\xd5\x2f\xc5\x76\xad\xdd\x19\x14\x22\x9b\xaa\x3b\xd8\x07\x90\x75\x57\x6c\x78\xc6\x13\x5c\x4c\xb4\xee\x6f\x7f\xf0\x97\x8a\xe5\xfa\xe8\x47\x01\x9e\x7b\xfb\x40\xba\x44\xff\xd5\xbb\x85\x6d\x3a\x38\xbd\x0b\x47\x84\xfb\xf6\x7e\x87\x2d\x29\x75\x2d\xed\x62\xbd\xfc\x7d\x27\x50\xbb\x9c\x94\x95\xce\x48\xf3\xd8\x71\x0a\x1b\x07\x77\xbb\x46\xfd\xe4\x3b\xfd\xd8\x18\x56\x55\x68\xdb\x61\x75\xfa\x11\xb7\x19\xa7\xfa\x58\x16\x68\x5c\x48\xed\x5a\x66\x8e\x35\x17\x6d\x4a\xf1\xac\xfe\x55\x81\x5c\xb2\xc8\x99\xa0\xd0\xd9\xcd\xa2\xf5\x47\x96\x6b\x8b\x17\x13\x07\xa7\xaf\x52\xe3\x11\x5a\x50\x09\xcd\x0c\xd7\x1b\x3e\xd0\x7b\xf9\xdd\xf1\xc2\xdf\x22\xcb\x0e\xb3\x97\x6d\x97\x19\x03\x4a\x60\x2f\x8e\xfb\x40\xea\xd0\x40\x29\x69\x51\xa6\x37\x46\x11\x06\x11\x26\x7d\xec\x9a\xed\x4c\x57\x37\x2b\xcf\xd2\x38\xe0\xd9\x8b\x8d\xf0\xb4\xbf\x3b\x16\xe1\x31\x49\x61\xdd\x78\xd1\x17\x81\x09\xab\x36\x29\x66\x74\x24\xeb\x34\xc9\x0a\xef\x4e\x74\x9c\x6a\xfa\xd4\xea\x68\x23\x55\xdb\xc1\xea\xe3\x65\x8a\x50\xe8\xc1\xbc\xba\x59\x7d\x84\x24\xf9\xf5\x5c\xdd\xac\x62\x7b\xe3\x47\xc2\xd3\x6a\xd8\x05\x3b\xb6\x47\x58\x23\x0a\xd0\x55\x4a\xfe\x77\x53\xe5\xf9\x21\x74\x3e\x6b\xad\xad\x5f\x0f\x9d\xbf\xd6\x63\xcf\x3d\x50\x46\x8f\x1e\x20\xbf\x0c\x60\x89\x75\xf6\x10\xa7\x37\x63\x22\xb3\x0d\xc5\xeb\xc7\xbe\x69\x73\x6c\xc7\x75\x64\x1f\x25\x67\xda\xdc\x2a\x26\x34\x0f\xbf\x6f\x13\x0f\xc2\x83\x8f\xcb\x98\xc1\xe5\x60\xc0\x35\x51\x5f\x2e\x50\x6b\xb6\x1d\x98\x61\xb2\x71\x22\xd3\x43\x19\xc2\xc4\xab\xfd\xe8\x66\xf6\xab\x43\x29\xc2\xc4\x8b\x93\x87\x22\xfa\x1b\x20\x33\xba\x61\x37\x2a\x6c\x73\x87\xd4\x50\x92\x10\xbe\x14\xb6\xd7\x61\x74\xb2\xcf\xd7\x18\x78\xbc\x2f\x70\x0b\xab\xda\x7a\xc5\xf1\x7a\x6c\xe0\xfa\xd8\xc0\xf5\xb1\x81\x6b\xf8\x3c\x36\x70\x7d\x6c\xe0\xfa\xd8\xc0\xf5\xb1\x81\xeb\x63\x03\xd7\xc7\x06\xae\x8f\x0d\x5c\xff\xc5\x1a\xb8\x86\x32\xe5\xf7\xee\x97\x5b\x22\xbb\x20\xdd\x9b\x2b\xbd\xe1\x91\xb2\x6c\xf8\x19\x18\xfb\xd3\x64\xfe\x85\x91\xa2\x65\xef\xb6\xe4\x70\xd1\x52\xcf\xb9\xcd\xd6\x6e\x95\xc5\x8e\xee\x43\x2d\xc8\x78\xfa\x7b\x25\x0e\x85\xc5\xcc\x63\xb2\x50\xca\x8c\xd8\xa5\x9c\x76\xb5\xab\xb5\xfd\x62\xb3\x95\x0a\x57\x0b\xee\x81\x0c\x07\xef\x09\x80\x85\xe9\xef\x53\xda\xba\x63\xeb\x9a\xa5\xdc\xf4\x4b\xcc\xb3\x13\x2c\x93\xeb\x39\x47\xdb\x9b\x61\x81\x8d\xdd\x13\xec\xc7\xc7\x98\xdd\x49\xb4\x7e\x2d\x42\xf8\xa3\xdf\x0f\x49\xb4\x46\x0e\x50\x7e\xda\xe1\xc9\xe1\x9b\xe2\x1f\x79\x70\xd2\x1f\x90\x8c\x82\xfc\x98\x43\x93\xb1\xc3\x91\x03\xbb\x9a\x9f\x72\x62\x72\xe4\xb4\xe4\xac\x83\x78\x03\xf7\x68\xa6\x76\x4c\x7f\xa3\xd3\x91\xbf\xc9\xc9\xc8\x8f\x3e\x15\x19\x3b\xfd\x18\x9d\x61\xe4\x44\xe4\x67\xd9\x3c\x3b\xfa\x6a\x1f\xce\x12\xed\xcf\x9a\xbf\xac\x10\x2c\xfd\x6f\x45\xdb\x07\xe0\x7f\x4d\xb1\xb5\x71\xad\x8d\x54\x6c\x1b\xb6\xb2\x9b\x9a\x15\x4b\x29\xd0\xc6\xec\xe6\xf8\x37\xa1\x4f\xdc\x9a\xc2\x0f\x3c\xdb\x3f\x5b\x9b\x4a\xf0\x3f\xff\xfb\xc4\x41\xc5\xec\xe7\x80\x07\x7d\xf9\x7f\x01\x00\x00\xff\xff\xfd\xd7\x57\x3d\x26\x7b\x00\x00")

func manifests00CustomResourceDefinitionYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests00CustomResourceDefinitionYaml,
		"manifests/00-custom-resource-definition.yaml",
	)
}

func manifests00CustomResourceDefinitionYaml() (*asset, error) {
	bytes, err := manifests00CustomResourceDefinitionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/00-custom-resource-definition.yaml", size: 31526, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0xa3, 0x8b, 0x6e, 0x23, 0xb, 0x73, 0x8d, 0x55, 0xce, 0xbd, 0x88, 0x85, 0x4d, 0x11, 0x48, 0x80, 0xd7, 0x3, 0xe7, 0xc, 0x7d, 0x27, 0x14, 0x46, 0xa, 0x1c, 0xc0, 0x27, 0x52, 0x4a, 0x5c}}
	return a, nil
}

var _manifests00IngressCredentialsRequestYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x52\xc1\x6e\x1b\x3b\x0c\xbc\xef\x57\x10\x3e\x3e\x40\x9b\x17\x14\x05\x0a\xdd\x12\xb7\x48\x0f\x39\x04\x36\xd0\x02\xbd\xd1\xd2\x78\x23\x44\x16\xb7\x22\x37\x05\xfa\xf5\x85\xec\xed\xba\xa9\x4f\xbd\x05\xb9\xad\x38\x24\x67\x76\x38\x3c\xa6\x2f\xa8\x9a\xa4\x78\x0a\x59\xa6\x18\x2a\x22\x8a\x25\xce\xbd\x8c\x28\xfa\x98\xf6\xd6\x27\xb9\x7a\xbe\xee\x9e\x52\x89\x9e\xd6\x4b\x83\x6e\xf0\x7d\x82\x5a\x77\x80\x71\x64\x63\xdf\x11\x65\xde\x21\x6b\xfb\x22\x0a\x52\xac\x4a\xce\xa8\xce\x44\xb2\xf6\x4f\x1f\xb4\x4f\xe2\x69\x75\xdd\xff\xbf\xea\x88\x0a\x1f\xe0\x69\xe1\x71\xa9\x0c\x15\xaa\x33\xa2\x23\x87\x17\xf0\x51\xa0\x3b\x2b\x74\x32\xa2\xb2\x49\xed\x74\x44\x68\x9c\x8a\x50\x61\x1b\xec\x4f\x02\x4e\xfb\xff\x1e\xd3\x05\xbb\x60\x98\x05\x9c\x17\x13\x8d\x55\x9e\x53\x44\xdd\xce\x14\x44\xff\xe2\x59\xeb\x3f\xf9\x76\xf3\x75\xfb\xf0\xc7\xaa\x23\xa2\xc6\x86\x03\x8a\x7d\x2a\x56\x13\x66\xdb\x1c\x61\xbf\x47\x30\x4f\x37\x39\xcb\x8f\x63\x8d\x88\x83\x35\xc6\xf9\xe5\x08\x99\xd5\x52\xc8\xc2\x71\xc7\x99\x4b\x48\x65\xf0\x1f\xa1\xa1\xa6\x1d\xee\x85\xe3\xed\xb1\x8a\xaa\xcb\x48\x95\xc9\xf0\xfe\x9d\xbf\x4f\x6a\x9f\x45\x0d\xf1\x9b\x14\x5c\xe2\xeb\x47\x2e\x03\x36\x50\x99\x6a\xc0\x06\x41\x6a\xdc\xc2\xce\x8d\xc6\x83\xbf\x6b\x3e\x9f\x3a\x7e\x03\x75\x7e\x7b\x5a\xfd\xb7\xea\x9c\x73\xdd\xab\x8c\x97\xe3\x9f\x53\xc5\xdb\x0c\x59\xfb\xb3\x8b\x98\x55\xc9\xb8\x4d\x25\xa6\x32\x2c\x11\x6b\x35\x4f\xeb\x66\x61\xda\x4d\x4d\xc5\xeb\xbd\xd7\x10\xc6\x37\x79\xad\xbb\xf5\xc3\xc5\xad\xc6\x36\xb8\x4f\x05\x71\x23\x19\x2f\xce\xa5\x57\xb1\x68\xcf\xf1\x90\x4a\xf7\x2b\x00\x00\xff\xff\x8f\x64\x7a\x7c\xb8\x05\x00\x00")

func manifests00IngressCredentialsRequestYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests00IngressCredentialsRequestYaml,
		"manifests/00-ingress-credentials-request.yaml",
	)
}

func manifests00IngressCredentialsRequestYaml() (*asset, error) {
	bytes, err := manifests00IngressCredentialsRequestYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/00-ingress-credentials-request.yaml", size: 1464, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc8, 0x2c, 0xb5, 0xfb, 0x97, 0x77, 0x7d, 0xd7, 0x6d, 0x81, 0x2f, 0x39, 0x37, 0xcd, 0x2b, 0x82, 0x89, 0xac, 0x43, 0x14, 0x12, 0x84, 0x8, 0xf9, 0x32, 0x7f, 0xa9, 0x86, 0xe7, 0x98, 0x8d, 0x15}}
	return a, nil
}

var _manifests00NamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\x31\x0a\x02\x41\x0c\x05\xd0\x7e\x4e\x11\xb6\x5f\xc5\x76\x0e\x61\x69\xff\xd9\xf9\x6a\xd0\x49\x86\x24\x78\x7e\xb1\xb2\x7c\xf0\x5e\x6a\xa3\xcb\x15\x93\xb9\x70\xb0\x61\xe9\x8d\x91\xea\xd6\xe5\x73\x69\x93\x85\x81\x42\x6f\x22\x30\xf3\x42\xa9\x5b\xfe\x28\xe2\x8b\x96\x4f\xbd\xd7\x49\xfd\x6c\x3e\xb8\x27\xdf\x3c\xca\xa3\xcb\xb6\x35\x11\xc3\x64\xff\xb7\x5d\xed\x11\xcc\xdc\x7d\x31\x50\x1e\xed\x1b\x00\x00\xff\xff\x24\x2e\xb5\xfe\x7e\x00\x00\x00")

func manifests00NamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests00NamespaceYaml,
		"manifests/00-namespace.yaml",
	)
}

func manifests00NamespaceYaml() (*asset, error) {
	bytes, err := manifests00NamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/00-namespace.yaml", size: 126, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe6, 0x64, 0x83, 0xa1, 0xe0, 0x1a, 0x81, 0x67, 0x21, 0xaa, 0xe0, 0x58, 0x7a, 0x66, 0xc1, 0x35, 0xb6, 0x60, 0x1f, 0xeb, 0xb8, 0x57, 0xea, 0xfd, 0x63, 0x9, 0x25, 0x83, 0xb5, 0xc3, 0x8e, 0xf6}}
	return a, nil
}

var _manifests01ClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x31\x4f\x03\x31\x0c\x85\xf7\xfc\x0a\x4b\xcc\x17\xc4\x86\xb2\x01\x03\x7b\x91\xd8\xdd\x9c\xdb\x33\xbd\xda\x91\xed\x74\xe0\xd7\xa3\xe8\x0a\x4b\xa5\x8a\xd9\x7e\xef\x7d\xdf\x03\xbc\xb2\xcc\x0e\xb1\x10\x68\x23\xc3\x50\x83\xba\x76\x0f\x32\x30\x5d\x09\x42\x81\xc3\xe1\x83\xec\xc2\x95\xe0\xa5\x56\xed\x12\x39\x9d\x58\xe6\x02\x6f\xdb\xeb\x4e\x57\x1a\x45\x2c\xc7\x84\x8d\x3f\xc9\x9c\x55\x0a\xd8\x1e\x6b\xc6\x1e\x8b\x1a\x7f\x63\xb0\x4a\x3e\x3d\x7b\x66\x7d\xbc\x3c\xa5\x33\x05\xce\x18\x58\x12\x80\xe0\x99\xca\x20\x10\x5f\xf8\x10\x13\xcb\xd1\xc8\x7d\xfa\x65\x4a\xde\xf7\x5f\x54\xc3\x4b\x9a\x60\x9b\xbe\x12\x5d\x81\xfe\x3a\x6e\x92\xdb\xc1\x1b\xd6\xfb\x0b\xc3\x76\x47\x87\x41\x73\xe3\x96\x00\xb0\xf1\xbb\x69\x6f\x77\xa4\xfe\xe3\xf1\x13\x00\x00\xff\xff\x5e\x3a\x23\xb1\x71\x01\x00\x00")

func manifests01ClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests01ClusterRoleBindingYaml,
		"manifests/01-cluster-role-binding.yaml",
	)
}

func manifests01ClusterRoleBindingYaml() (*asset, error) {
	bytes, err := manifests01ClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/01-cluster-role-binding.yaml", size: 369, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xda, 0x8e, 0x10, 0x4b, 0xec, 0x40, 0x80, 0x5c, 0x10, 0x83, 0xa9, 0x57, 0x2, 0x49, 0x9d, 0x4e, 0x4d, 0x6a, 0xec, 0xaf, 0x5d, 0x81, 0xa3, 0x2f, 0x1e, 0xd3, 0x8b, 0x69, 0xa0, 0x39, 0x50, 0xdf}}
	return a, nil
}

var _manifests01RoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd0\x31\x4f\xc3\x40\x0c\x05\xe0\xfd\x7e\xc5\x93\x98\x13\xc4\x86\x6e\x83\x85\xbd\x48\xec\xee\xc5\x6d\x4c\x5b\xfb\x64\x3b\x1d\xf8\xf5\x28\x22\x88\x01\xc1\xd2\xd9\xb6\xde\xf7\x7c\x87\x67\xd1\x29\x90\x33\xc3\x3a\x3b\xa5\x39\xdc\xce\x8c\x34\x48\x06\x5e\xd9\xaf\xd2\x18\x4f\xad\xd9\xa2\x39\x96\x93\xe8\x54\xb1\xb3\x33\xaf\x97\xa2\xc7\x42\x5d\xde\xd8\x43\x4c\x2b\x7c\x4f\x6d\xa4\x25\x67\x73\xf9\xa0\x14\xd3\xf1\xf4\x18\xa3\xd8\xfd\xf5\xa1\x5c\x38\x69\xa2\xa4\x5a\x00\xa5\x0b\x57\x88\x1e\x9d\x23\x86\xef\xe8\x6d\x10\x9d\x1a\xd7\x15\xa4\x31\xcb\x21\x87\x5f\x7b\xb1\xec\xdf\xb9\x65\xd4\x32\xe0\x4b\xb4\x41\x37\xe7\xed\x09\xeb\x13\x76\x7c\x58\xad\x3f\x95\x0b\x40\x5d\x5e\xdc\x96\xfe\x4f\xd7\xbf\xc3\x3f\x03\x00\x00\xff\xff\x1f\x8f\x27\xc8\x6f\x01\x00\x00")

func manifests01RoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests01RoleBindingYaml,
		"manifests/01-role-binding.yaml",
	)
}

func manifests01RoleBindingYaml() (*asset, error) {
	bytes, err := manifests01RoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/01-role-binding.yaml", size: 367, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xce, 0x6b, 0xe2, 0x98, 0x77, 0x85, 0x4, 0x5f, 0x81, 0xee, 0xa8, 0x60, 0xbe, 0x8a, 0xf3, 0x3, 0xad, 0xd8, 0x7, 0x27, 0x33, 0x11, 0xe8, 0x28, 0x66, 0xe4, 0xd9, 0x9, 0x76, 0xee, 0x60, 0xb5}}
	return a, nil
}

var _manifests01RoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x70\xb7\x02\x56\xd1\xad\xd0\x05\xba\x77\xe8\xce\xc8\x74\x42\x44\x12\x05\x52\x36\xd0\x9e\xbe\x88\x63\x1b\x41\x3c\x74\x13\xc5\xf7\x9f\x3e\xf4\x02\x5f\x92\x08\x46\x51\x68\x17\x02\xa9\xa4\xd8\x44\x81\x9b\x51\x1a\xbd\xbb\x72\x19\xc2\xc2\x38\xac\xfc\x4d\x6a\x2c\x25\x80\x9e\x30\x7a\x9c\xda\x45\x94\x7f\xb1\xb1\x14\x7f\xfd\x30\xcf\xf2\x36\xbf\xbb\x4c\x0d\x07\x6c\x18\x1c\x40\xc1\x4c\x01\xb8\x9c\x95\xcc\xfa\x4d\xbf\x2e\xac\x62\xa4\x70\x7b\xb4\xd8\x85\xc7\xd6\x1f\x38\x9d\x12\x59\x70\x3d\x60\xe5\x4f\x95\xa9\xda\x4d\xda\xef\x3d\xfd\x9e\xf5\x2c\x0e\x40\xc9\x64\xd2\x48\x2b\xd6\xbd\x76\x0e\x60\x26\x3d\x3d\x5c\x1c\x6d\x5d\x77\x8c\x56\x19\x6c\x39\x18\xe9\xcc\x91\xee\x03\x95\xa1\x0a\x97\x76\x9f\xea\xed\x3b\xac\x51\x69\xb3\xa4\x29\x53\x4c\xc8\x79\x05\x67\xda\xa8\x28\x65\xe4\x73\xc6\xba\xf9\xa2\xd2\xb2\xfa\xb7\x17\xd6\x25\xf3\xd4\x6c\xa0\x9a\xe4\x27\xef\xfe\x87\x82\x4f\xc6\xbf\x00\x00\x00\xff\xff\x4f\x96\x11\xa4\xdd\x01\x00\x00")

func manifests01RoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests01RoleYaml,
		"manifests/01-role.yaml",
	)
}

func manifests01RoleYaml() (*asset, error) {
	bytes, err := manifests01RoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/01-role.yaml", size: 477, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4d, 0xf1, 0xe, 0xa2, 0x89, 0xa6, 0xa5, 0x86, 0x8d, 0x2d, 0x22, 0x6e, 0x62, 0x6c, 0x7c, 0x58, 0xca, 0x7b, 0x96, 0x5f, 0xa7, 0xbd, 0x5f, 0xcb, 0x2d, 0x53, 0xeb, 0x25, 0xd3, 0x62, 0x2c, 0xf8}}
	return a, nil
}

var _manifests01ServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xb1\x6e\x84\x30\x10\x44\x7b\x7f\xc5\x48\xd4\x20\xa5\x75\x97\x32\x75\xa4\xf4\x96\x3d\x84\xd5\x81\xed\xdb\x5d\xf8\xfe\x13\x88\xab\xae\x9e\xa7\x37\x6f\xc0\x77\xce\x6d\xaf\x8e\xb9\x29\x7c\x21\x5a\xa7\x26\x6f\x0a\x71\xe3\x3a\x4f\xf8\x71\xd8\xd2\xf6\xb5\x40\xf9\xdc\x45\x89\x9a\x36\x5a\x4f\x99\xb0\xdc\x3a\x4b\x18\xd0\xa9\x9b\x98\x49\xab\x36\x85\x87\xd4\x12\xf1\x4b\x3d\x24\xf3\xf6\x87\xd4\xe5\x8f\x7a\x12\x11\xc7\x57\xd8\xe8\xa9\x24\x4f\x31\xe0\xf2\x45\x48\xfd\x57\x9a\x8d\xef\x80\x7b\xb8\x8e\xe2\x99\x55\x6d\x91\xd9\xc7\x0f\xee\x15\x00\x00\xff\xff\xe5\x09\x18\x74\xc4\x00\x00\x00")

func manifests01ServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests01ServiceAccountYaml,
		"manifests/01-service-account.yaml",
	)
}

func manifests01ServiceAccountYaml() (*asset, error) {
	bytes, err := manifests01ServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/01-service-account.yaml", size: 196, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2c, 0xae, 0x8d, 0xe1, 0x55, 0xc4, 0xdf, 0x60, 0x69, 0xa, 0xef, 0xf1, 0x8c, 0x61, 0xea, 0x45, 0xf4, 0xa, 0xcb, 0x9d, 0xc7, 0xc3, 0xb4, 0x10, 0x8a, 0xb6, 0xf3, 0x21, 0xe6, 0x97, 0xc0, 0x28}}
	return a, nil
}

var _manifests02DeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4f\x6f\xea\x48\x0c\xbf\xf3\x29\xac\xdc\x43\x61\xb5\xa7\xb9\xa1\x6e\xba\x5b\xa9\xa5\x08\xaa\xee\xb1\x32\x13\x03\x23\x26\xe3\xac\xed\x20\xf2\xed\x57\x69\x29\x04\xca\xe3\xbd\xcb\xcb\x71\x7e\x7f\xfc\x73\xc6\x63\xac\xc3\x1b\x89\x06\x4e\x0e\xb0\xae\xf5\x6e\x37\x1e\x6c\x43\x2a\x1d\xfc\x45\x75\xe4\xb6\xa2\x64\x83\x8a\x0c\x4b\x34\x74\x03\x80\x84\x15\x39\x08\x69\x2d\xa4\x9a\x73\x4d\x82\xc6\x72\x00\xb4\x46\x4f\x0e\xb8\xa6\xa4\x9b\xb0\xb2\xfc\x1b\x4f\x6b\xf2\x9d\x8d\x50\x1d\x83\x47\x75\x30\x1e\x00\xa8\x09\x1a\xad\xdb\x0e\x01\xb0\xb6\x26\x07\x73\xf2\x42\x68\xd4\xc1\x14\xc9\x1b\xcb\x27\x5c\xa1\xf9\xcd\x13\x2e\x29\xea\xe7\xc1\x8d\x50\x46\x55\x1d\xd1\xe8\xa0\xec\xf5\xd1\x7d\xf1\xcc\xe4\x86\x0d\xc0\x57\xee\x0f\x1a\x97\xb4\x38\x8b\xd4\x7d\xdb\x66\x49\x92\xc8\x48\x87\x81\xef\x58\x1d\xc4\x90\x9a\xfd\xc9\x9c\x4b\xca\x85\x23\x0d\xcf\x99\x15\xaa\x91\x38\xc8\xb2\x03\xd5\x38\x76\x85\x03\xa7\x63\xb4\x1c\xb6\xd4\x3a\xc8\x6e\x7b\x64\xc7\x5a\x5f\xd1\x1d\x64\xc5\x3e\xa8\xe9\x09\xa2\xd5\x8a\xbc\x39\xc8\xa6\xbc\xf0\x1b\x2a\x9b\x48\xd9\x95\x2a\x17\x05\x9a\x24\x84\x7e\x83\xcb\x13\xfb\x57\xab\x14\x7b\xf2\x8d\xf5\x64\xa7\xfe\x16\xe4\x39\x95\xdd\x0c\xfc\x31\xfa\x79\x86\xc4\x96\x0b\x61\xd9\xfe\xde\x04\x4a\xb2\x0b\x9e\x26\xde\x73\x93\x6c\xfa\xe3\x91\x00\xa8\x25\xb0\x04\x6b\xef\x23\xaa\x7e\x32\xb5\x55\xa3\x2a\xf7\xb1\xe9\x6e\x24\xf7\x12\x2c\x78\x8c\x07\x81\xe7\x64\x18\x12\x49\x6f\xe8\xf2\x5b\x63\x77\xc8\x4b\x52\x85\xf4\x11\xf8\x99\x54\x71\x4d\x33\x8e\xc1\xb7\x0e\x1e\x30\xc6\x25\xfa\xed\x2b\x3f\xf1\x5a\x5f\x52\x21\x72\xa6\x0c\x55\x47\x6e\x62\xfc\x12\x3c\xae\xa6\x6c\x33\x21\xed\xde\xf5\x05\xaf\xf7\x70\xef\x58\xc2\x3a\xa4\x63\x1f\x97\xe1\x5c\xf7\xa8\xb4\xef\xe0\xb9\xaa\x30\x95\xae\x77\x94\xdf\xea\x29\x07\x35\x94\xbe\x03\xa5\x5d\x5f\x7d\xfa\x33\xf3\xe2\xa9\x98\x2c\x8a\xf7\xb7\x62\xbe\x78\x7c\x99\x9e\x71\x00\x76\x18\x1b\x72\x90\x8d\x86\xa3\xe1\x38\xd7\x84\xb5\x6e\xd8\xb2\xab\x4e\xff\x4e\x5e\xef\xff\x79\x9f\x4e\x9e\x8b\xc5\x6c\x72\x5f\x5c\x73\x7a\x10\xae\xdc\x05\x00\xb0\x0a\x14\xcb\x39\xad\xbe\x23\x07\x6c\x86\xb6\x71\xc7\x05\x33\x3c\x2e\xc3\xab\x31\x1e\x9f\x27\x7f\x5f\x2d\x7e\xe5\x06\x36\x58\x0b\xef\xdb\x5c\xb8\xe9\xd6\xc4\xee\xcf\xe1\xa8\xa7\x14\x52\x6e\xc4\x93\x9e\x07\x13\xfa\xaf\x21\x35\xbd\x8c\xeb\xeb\xc6\xc1\x78\x54\x0d\xfe\x0f\x00\x00\xff\xff\x0e\x3a\x57\xb2\xf7\x05\x00\x00")

func manifests02DeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests02DeploymentYaml,
		"manifests/02-deployment.yaml",
	)
}

func manifests02DeploymentYaml() (*asset, error) {
	bytes, err := manifests02DeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/02-deployment.yaml", size: 1527, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x85, 0x64, 0x5d, 0xe9, 0x9c, 0x4, 0x18, 0xe5, 0xf4, 0x94, 0x25, 0x9e, 0x5f, 0x8a, 0x0, 0x9, 0x18, 0xa0, 0x1e, 0xcf, 0x61, 0x57, 0x16, 0xac, 0xfa, 0x9c, 0xf3, 0x80, 0x75, 0xf3, 0x63, 0xf0}}
	return a, nil
}

var _manifests03ClusterOperatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x31\x6f\xc2\x40\x0c\x85\xf7\xfb\x15\x4f\xb0\x96\x14\xd6\xac\x4c\x9d\x58\x2a\x76\xf7\x62\x38\xab\x89\x1d\x9d\x7d\x20\xfe\x7d\x45\x00\xb5\xea\x4d\x4f\x67\xfb\x7d\xdf\x1a\x9f\x45\x1c\x95\xdd\x5a\xcd\x0c\x71\xa8\x05\x72\x65\x0a\x1e\xf0\x75\xc3\xfe\x78\x78\x83\xc4\x7d\x62\x3a\xde\xd0\x9c\x07\x90\x83\x90\x6d\x9a\x9a\x4a\xa6\x10\xd3\xb4\xc6\xc4\xb9\x90\x8a\x4f\x08\x43\xf0\x38\x22\x0a\xdf\xef\x71\x2d\x92\x0b\xf6\x63\xf3\xe0\x7a\x98\xb9\x52\x58\xfd\x85\x86\xe1\x4a\x12\x38\x59\xed\xd2\x1a\x1f\x7a\xae\xec\xbe\x37\x8d\x6a\xe3\xc8\xf5\xa9\xe3\x20\x1d\xd0\xe6\x61\xc9\xf1\xd7\xbb\x4b\x34\xcb\x91\xab\x8b\x69\x8f\x6c\x7a\x92\x73\x67\x33\xab\x17\x39\x45\x27\xf6\x7e\xd9\xa5\x6f\xd1\xa1\xff\x6f\x91\x26\x0e\x1a\x28\xa8\x4f\x80\xd2\xc4\x3d\xe4\xc1\x4f\x1e\x14\xcd\xef\xff\x97\x47\xf3\x92\x81\xcd\x73\xcf\x5e\x15\x58\xde\xe5\x85\x5f\x6d\xbb\x6d\xb7\xdb\xb8\xd2\xec\xc5\x62\x95\x7e\x02\x00\x00\xff\xff\xb3\xe2\x1b\x07\x65\x01\x00\x00")

func manifests03ClusterOperatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests03ClusterOperatorYaml,
		"manifests/03-cluster-operator.yaml",
	)
}

func manifests03ClusterOperatorYaml() (*asset, error) {
	bytes, err := manifests03ClusterOperatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/03-cluster-operator.yaml", size: 357, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9b, 0x55, 0x62, 0x66, 0x26, 0xb0, 0xbd, 0x39, 0xb8, 0x3f, 0x33, 0x66, 0x5d, 0x9f, 0x49, 0x8a, 0xa2, 0xac, 0x2a, 0x5c, 0x3e, 0x18, 0x29, 0x74, 0xbc, 0x0, 0x97, 0xc9, 0xe2, 0x1b, 0x83, 0x26}}
	return a, nil
}

var _manifestsImageReferences = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xce\x31\x4e\xc5\x30\x0c\x80\xe1\x3d\xa7\xb0\xb2\xa7\x0f\x24\xa6\xcc\x2c\xcc\x48\xec\x56\xf1\x4b\xad\x36\x71\x64\xbb\x15\xdc\x1e\xb5\x45\xa8\x0c\x2c\x4c\x89\x6c\xe9\xff\x3c\x73\x7b\xcf\xf0\x52\xb1\xd0\xab\x2b\x61\x0d\xd8\xf9\x8d\xd4\x58\x5a\x06\xde\xe7\x83\x74\x6a\x36\xf1\xdd\x07\x96\xdb\xf6\x18\xac\xd3\x98\x03\x80\x63\xb1\xfd\x4d\xd0\xb0\x52\x86\x71\x59\xcd\x49\x13\xb7\xa2\x64\x96\xa4\x93\xa2\x8b\x06\x00\x80\xbb\x4a\xcd\x70\x7c\x01\x4e\x35\x3e\xcb\x38\x93\x1e\x78\xfc\xde\x9c\xa5\xf8\x43\xde\x44\xb9\x70\x4b\x7f\xb5\xf3\x82\x4e\xe6\xf1\x72\xc6\x84\x5d\xe5\xe3\x33\xa9\xac\x4e\x17\xfc\xdf\xf6\xef\x60\xde\x9e\x86\x87\x18\xbe\x02\x00\x00\xff\xff\x7b\x4a\x8b\x19\x39\x01\x00\x00")

func manifestsImageReferencesBytes() ([]byte, error) {
	return bindataRead(
		_manifestsImageReferences,
		"manifests/image-references",
	)
}

func manifestsImageReferences() (*asset, error) {
	bytes, err := manifestsImageReferencesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/image-references", size: 313, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe6, 0xa0, 0x49, 0x8, 0x56, 0xa3, 0x55, 0xd, 0x5d, 0xf6, 0x4d, 0xa5, 0x59, 0x7d, 0x67, 0xf8, 0xab, 0x39, 0xbf, 0x6b, 0x78, 0xcc, 0xae, 0x8c, 0xda, 0xaf, 0x5b, 0x3a, 0xd4, 0xa1, 0x48, 0xfe}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/router/cluster-role-binding.yaml": assetsRouterClusterRoleBindingYaml,

	"assets/router/cluster-role.yaml": assetsRouterClusterRoleYaml,

	"assets/router/deployment.yaml": assetsRouterDeploymentYaml,

	"assets/router/metrics/cluster-role-binding.yaml": assetsRouterMetricsClusterRoleBindingYaml,

	"assets/router/metrics/cluster-role.yaml": assetsRouterMetricsClusterRoleYaml,

	"assets/router/metrics/role-binding.yaml": assetsRouterMetricsRoleBindingYaml,

	"assets/router/metrics/role.yaml": assetsRouterMetricsRoleYaml,

	"assets/router/namespace.yaml": assetsRouterNamespaceYaml,

	"assets/router/service-account.yaml": assetsRouterServiceAccountYaml,

	"assets/router/service-cloud.yaml": assetsRouterServiceCloudYaml,

	"assets/router/service-internal.yaml": assetsRouterServiceInternalYaml,

	"manifests/00-cluster-role.yaml": manifests00ClusterRoleYaml,

	"manifests/00-custom-resource-definition-internal.yaml": manifests00CustomResourceDefinitionInternalYaml,

	"manifests/00-custom-resource-definition.yaml": manifests00CustomResourceDefinitionYaml,

	"manifests/00-ingress-credentials-request.yaml": manifests00IngressCredentialsRequestYaml,

	"manifests/00-namespace.yaml": manifests00NamespaceYaml,

	"manifests/01-cluster-role-binding.yaml": manifests01ClusterRoleBindingYaml,

	"manifests/01-role-binding.yaml": manifests01RoleBindingYaml,

	"manifests/01-role.yaml": manifests01RoleYaml,

	"manifests/01-service-account.yaml": manifests01ServiceAccountYaml,

	"manifests/02-deployment.yaml": manifests02DeploymentYaml,

	"manifests/03-cluster-operator.yaml": manifests03ClusterOperatorYaml,

	"manifests/image-references": manifestsImageReferences,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"router": {nil, map[string]*bintree{
			"cluster-role-binding.yaml": {assetsRouterClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml":         {assetsRouterClusterRoleYaml, map[string]*bintree{}},
			"deployment.yaml":           {assetsRouterDeploymentYaml, map[string]*bintree{}},
			"metrics": {nil, map[string]*bintree{
				"cluster-role-binding.yaml": {assetsRouterMetricsClusterRoleBindingYaml, map[string]*bintree{}},
				"cluster-role.yaml":         {assetsRouterMetricsClusterRoleYaml, map[string]*bintree{}},
				"role-binding.yaml":         {assetsRouterMetricsRoleBindingYaml, map[string]*bintree{}},
				"role.yaml":                 {assetsRouterMetricsRoleYaml, map[string]*bintree{}},
			}},
			"namespace.yaml":        {assetsRouterNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml":  {assetsRouterServiceAccountYaml, map[string]*bintree{}},
			"service-cloud.yaml":    {assetsRouterServiceCloudYaml, map[string]*bintree{}},
			"service-internal.yaml": {assetsRouterServiceInternalYaml, map[string]*bintree{}},
		}},
	}},
	"manifests": {nil, map[string]*bintree{
		"00-cluster-role.yaml":                        {manifests00ClusterRoleYaml, map[string]*bintree{}},
		"00-custom-resource-definition-internal.yaml": {manifests00CustomResourceDefinitionInternalYaml, map[string]*bintree{}},
		"00-custom-resource-definition.yaml":          {manifests00CustomResourceDefinitionYaml, map[string]*bintree{}},
		"00-ingress-credentials-request.yaml":         {manifests00IngressCredentialsRequestYaml, map[string]*bintree{}},
		"00-namespace.yaml":                           {manifests00NamespaceYaml, map[string]*bintree{}},
		"01-cluster-role-binding.yaml":                {manifests01ClusterRoleBindingYaml, map[string]*bintree{}},
		"01-role-binding.yaml":                        {manifests01RoleBindingYaml, map[string]*bintree{}},
		"01-role.yaml":                                {manifests01RoleYaml, map[string]*bintree{}},
		"01-service-account.yaml":                     {manifests01ServiceAccountYaml, map[string]*bintree{}},
		"02-deployment.yaml":                          {manifests02DeploymentYaml, map[string]*bintree{}},
		"03-cluster-operator.yaml":                    {manifests03ClusterOperatorYaml, map[string]*bintree{}},
		"image-references":                            {manifestsImageReferences, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
